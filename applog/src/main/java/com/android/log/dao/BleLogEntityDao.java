package com.android.log.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.log.entity.BleLogEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLE_LOG_ENTITY".
*/
public class BleLogEntityDao extends AbstractDao<BleLogEntity, Long> {

    public static final String TABLENAME = "BLE_LOG_ENTITY";

    /**
     * Properties of entity BleLogEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Device_id = new Property(2, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Mac = new Property(3, String.class, "mac", false, "MAC");
        public final static Property Operation_type = new Property(4, String.class, "operation_type", false, "OPERATION_TYPE");
        public final static Property Operation_result = new Property(5, String.class, "operation_result", false, "OPERATION_RESULT");
        public final static Property Operation_tag = new Property(6, String.class, "operation_tag", false, "OPERATION_TAG");
        public final static Property Operation_details = new Property(7, String.class, "operation_details", false, "OPERATION_DETAILS");
        public final static Property Phone_series = new Property(8, String.class, "phone_series", false, "PHONE_SERIES");
        public final static Property Phone_model = new Property(9, String.class, "phone_model", false, "PHONE_MODEL");
        public final static Property Phone_id = new Property(10, String.class, "phone_id", false, "PHONE_ID");
        public final static Property Timestamp = new Property(11, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Checked = new Property(12, boolean.class, "checked", false, "CHECKED");
    }


    public BleLogEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BleLogEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLE_LOG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"DEVICE_ID\" TEXT," + // 2: device_id
                "\"MAC\" TEXT," + // 3: mac
                "\"OPERATION_TYPE\" TEXT," + // 4: operation_type
                "\"OPERATION_RESULT\" TEXT," + // 5: operation_result
                "\"OPERATION_TAG\" TEXT," + // 6: operation_tag
                "\"OPERATION_DETAILS\" TEXT," + // 7: operation_details
                "\"PHONE_SERIES\" TEXT," + // 8: phone_series
                "\"PHONE_MODEL\" TEXT," + // 9: phone_model
                "\"PHONE_ID\" TEXT," + // 10: phone_id
                "\"TIMESTAMP\" TEXT," + // 11: timestamp
                "\"CHECKED\" INTEGER NOT NULL );"); // 12: checked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLE_LOG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BleLogEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(3, device_id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
 
        String operation_type = entity.getOperation_type();
        if (operation_type != null) {
            stmt.bindString(5, operation_type);
        }
 
        String operation_result = entity.getOperation_result();
        if (operation_result != null) {
            stmt.bindString(6, operation_result);
        }
 
        String operation_tag = entity.getOperation_tag();
        if (operation_tag != null) {
            stmt.bindString(7, operation_tag);
        }
 
        String operation_details = entity.getOperation_details();
        if (operation_details != null) {
            stmt.bindString(8, operation_details);
        }
 
        String phone_series = entity.getPhone_series();
        if (phone_series != null) {
            stmt.bindString(9, phone_series);
        }
 
        String phone_model = entity.getPhone_model();
        if (phone_model != null) {
            stmt.bindString(10, phone_model);
        }
 
        String phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindString(11, phone_id);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(12, timestamp);
        }
        stmt.bindLong(13, entity.getChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BleLogEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(3, device_id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
 
        String operation_type = entity.getOperation_type();
        if (operation_type != null) {
            stmt.bindString(5, operation_type);
        }
 
        String operation_result = entity.getOperation_result();
        if (operation_result != null) {
            stmt.bindString(6, operation_result);
        }
 
        String operation_tag = entity.getOperation_tag();
        if (operation_tag != null) {
            stmt.bindString(7, operation_tag);
        }
 
        String operation_details = entity.getOperation_details();
        if (operation_details != null) {
            stmt.bindString(8, operation_details);
        }
 
        String phone_series = entity.getPhone_series();
        if (phone_series != null) {
            stmt.bindString(9, phone_series);
        }
 
        String phone_model = entity.getPhone_model();
        if (phone_model != null) {
            stmt.bindString(10, phone_model);
        }
 
        String phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindString(11, phone_id);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(12, timestamp);
        }
        stmt.bindLong(13, entity.getChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BleLogEntity readEntity(Cursor cursor, int offset) {
        BleLogEntity entity = new BleLogEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // device_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mac
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // operation_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // operation_result
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // operation_tag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // operation_details
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone_series
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone_model
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // timestamp
            cursor.getShort(offset + 12) != 0 // checked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BleLogEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMac(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperation_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOperation_result(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOperation_tag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperation_details(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone_series(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone_model(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTimestamp(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChecked(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BleLogEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BleLogEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BleLogEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
