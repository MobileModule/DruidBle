package com.android.log.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.log.entity.DeviceBleOperaTimeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_BLE_OPERA_TIME_ENTITY".
*/
public class DeviceBleOperaTimeEntityDao extends AbstractDao<DeviceBleOperaTimeEntity, Long> {

    public static final String TABLENAME = "DEVICE_BLE_OPERA_TIME_ENTITY";

    /**
     * Properties of entity DeviceBleOperaTimeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Batch_uuid = new Property(1, String.class, "batch_uuid", false, "BATCH_UUID");
        public final static Property Timestamp_start = new Property(2, long.class, "timestamp_start", false, "TIMESTAMP_START");
        public final static Property Timestamp_end = new Property(3, long.class, "timestamp_end", false, "TIMESTAMP_END");
        public final static Property Opera_type = new Property(4, int.class, "opera_type", false, "OPERA_TYPE");
        public final static Property Device_all_num = new Property(5, int.class, "device_all_num", false, "DEVICE_ALL_NUM");
    }


    public DeviceBleOperaTimeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceBleOperaTimeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_BLE_OPERA_TIME_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BATCH_UUID\" TEXT," + // 1: batch_uuid
                "\"TIMESTAMP_START\" INTEGER NOT NULL ," + // 2: timestamp_start
                "\"TIMESTAMP_END\" INTEGER NOT NULL ," + // 3: timestamp_end
                "\"OPERA_TYPE\" INTEGER NOT NULL ," + // 4: opera_type
                "\"DEVICE_ALL_NUM\" INTEGER NOT NULL );"); // 5: device_all_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_BLE_OPERA_TIME_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceBleOperaTimeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String batch_uuid = entity.getBatch_uuid();
        if (batch_uuid != null) {
            stmt.bindString(2, batch_uuid);
        }
        stmt.bindLong(3, entity.getTimestamp_start());
        stmt.bindLong(4, entity.getTimestamp_end());
        stmt.bindLong(5, entity.getOpera_type());
        stmt.bindLong(6, entity.getDevice_all_num());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceBleOperaTimeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String batch_uuid = entity.getBatch_uuid();
        if (batch_uuid != null) {
            stmt.bindString(2, batch_uuid);
        }
        stmt.bindLong(3, entity.getTimestamp_start());
        stmt.bindLong(4, entity.getTimestamp_end());
        stmt.bindLong(5, entity.getOpera_type());
        stmt.bindLong(6, entity.getDevice_all_num());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceBleOperaTimeEntity readEntity(Cursor cursor, int offset) {
        DeviceBleOperaTimeEntity entity = new DeviceBleOperaTimeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // batch_uuid
            cursor.getLong(offset + 2), // timestamp_start
            cursor.getLong(offset + 3), // timestamp_end
            cursor.getInt(offset + 4), // opera_type
            cursor.getInt(offset + 5) // device_all_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceBleOperaTimeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatch_uuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp_start(cursor.getLong(offset + 2));
        entity.setTimestamp_end(cursor.getLong(offset + 3));
        entity.setOpera_type(cursor.getInt(offset + 4));
        entity.setDevice_all_num(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceBleOperaTimeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceBleOperaTimeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceBleOperaTimeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
