// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1.Define.proto

package protocol_v1;

public final class V1Define {
  private V1Define() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code protocol_v1.HeaderType}
   *
   * <pre>
   * 命令类型定义
   * </pre>
   */
  public enum HeaderType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TypeRegisterReq = 2;</code>
     */
    TypeRegisterReq(0, 2),
    /**
     * <code>TypeRegisterRsp = 3;</code>
     *
     * <pre>
     * 设备上传注册信息
     * </pre>
     */
    TypeRegisterRsp(1, 3),
    /**
     * <code>TypeParameterReq = 4;</code>
     */
    TypeParameterReq(2, 4),
    /**
     * <code>TypeParameterRsp = 5;</code>
     *
     * <pre>
     * 设备读取参数信息
     * </pre>
     */
    TypeParameterRsp(3, 5),
    /**
     * <code>TypeSettingReq = 6;</code>
     */
    TypeSettingReq(4, 6),
    /**
     * <code>TypeSettingRsp = 7;</code>
     *
     * <pre>
     * 设备读取配置信息
     * </pre>
     */
    TypeSettingRsp(5, 7),
    /**
     * <code>TypeEnvReq = 8;</code>
     */
    TypeEnvReq(6, 8),
    /**
     * <code>TypeEnvRsp = 9;</code>
     *
     * <pre>
     * 设备上传环境数据
     * </pre>
     */
    TypeEnvRsp(7, 9),
    /**
     * <code>TypeBehaviorReq = 10;</code>
     */
    TypeBehaviorReq(8, 10),
    /**
     * <code>TypeBehaviorRsp = 11;</code>
     *
     * <pre>
     * 设备上传行为数据, 第三方平台的行为数据
     * </pre>
     */
    TypeBehaviorRsp(9, 11),
    /**
     * <code>TypeGPSReq = 12;</code>
     */
    TypeGPSReq(10, 12),
    /**
     * <code>TypeGPSRsp = 13;</code>
     *
     * <pre>
     * 设备上传定位数据
     * </pre>
     */
    TypeGPSRsp(11, 13),
    /**
     * <code>TypeCellularReq = 14;</code>
     */
    TypeCellularReq(12, 14),
    /**
     * <code>TypeCellularRsp = 15;</code>
     *
     * <pre>
     * 设备上传基站数据
     * </pre>
     */
    TypeCellularRsp(13, 15),
    /**
     * <code>TypeWarningReq = 16;</code>
     */
    TypeWarningReq(14, 16),
    /**
     * <code>TypeWarningRsp = 17;</code>
     *
     * <pre>
     * 设备上传报警数据
     * </pre>
     */
    TypeWarningRsp(15, 17),
    /**
     * <code>TypeDownloadReq = 18;</code>
     */
    TypeDownloadReq(16, 18),
    /**
     * <code>TypeDownloadRsp = 19;</code>
     *
     * <pre>
     * 设备读取固件数据
     * </pre>
     */
    TypeDownloadRsp(17, 19),
    /**
     * <code>TypeUploadReq = 20;</code>
     */
    TypeUploadReq(18, 20),
    /**
     * <code>TypeUploadRsp = 21;</code>
     *
     * <pre>
     * 设备打包上传多种类型数据
     * </pre>
     */
    TypeUploadRsp(19, 21),
    /**
     * <code>TypeSettingAndParamReq = 22;</code>
     */
    TypeSettingAndParamReq(20, 22),
    /**
     * <code>TypeSettingAndParamRsp = 23;</code>
     *
     * <pre>
     * 设备打包读取参数和配置信息
     * </pre>
     */
    TypeSettingAndParamRsp(21, 23),
    /**
     * <code>TypeSMSMsg = 24;</code>
     */
    TypeSMSMsg(22, 24),
    /**
     * <code>TypeSMSRply = 25;</code>
     *
     * <pre>
     * 手机短信控制设备: 封装成协议包后进行Base64编码, 然后通过短信传输
     * </pre>
     */
    TypeSMSRply(23, 25),
    /**
     * <code>TypeBehavior3Req = 26;</code>
     */
    TypeBehavior3Req(24, 26),
    /**
     * <code>TypeBehavior3Rsp = 27;</code>
     *
     * <pre>
     * 设备上传行为数据, 内部结构为behavior3
     * </pre>
     */
    TypeBehavior3Rsp(25, 27),
    /**
     * <code>TypeTriggerReq = 28;</code>
     */
    TypeTriggerReq(26, 28),
    /**
     * <code>TypeTriggerRsp = 29;</code>
     *
     * <pre>
     * 设备读取触发器信息
     * </pre>
     */
    TypeTriggerRsp(27, 29),
    /**
     * <code>TypeEstrusReq = 100;</code>
     */
    TypeEstrusReq(28, 100),
    /**
     * <code>TypeEstrusRsp = 101;</code>
     *
     * <pre>
     * 设备上传发情feature
     * </pre>
     */
    TypeEstrusRsp(29, 101),
    /**
     * <code>TypeOriginReq = 102;</code>
     */
    TypeOriginReq(30, 102),
    /**
     * <code>TypeOriginRsp = 103;</code>
     *
     * <pre>
     * 设备上传加速度原始数据
     * </pre>
     */
    TypeOriginRsp(31, 103),
    /**
     * <code>TypeErrorReq = 104;</code>
     */
    TypeErrorReq(32, 104),
    /**
     * <code>TypeErrorRsp = 105;</code>
     *
     * <pre>
     * 设备上传错误数据，原状态数据
     * </pre>
     */
    TypeErrorRsp(33, 105),
    /**
     * <code>TypeBehavior2Req = 106;</code>
     */
    TypeBehavior2Req(34, 106),
    /**
     * <code>TypeBehavior2Rsp = 107;</code>
     *
     * <pre>
     * 设备上传ODBA数据, 内部结构为behavior2
     * </pre>
     */
    TypeBehavior2Rsp(35, 107),
    /**
     * <code>TypeOrigin2Req = 109;</code>
     */
    TypeOrigin2Req(36, 109),
    /**
     * <code>TypeOrigin2Rsp = 110;</code>
     *
     * <pre>
     * 设备上传加速度原始数据, v2
     * </pre>
     */
    TypeOrigin2Rsp(37, 110),
    /**
     * <code>TypeStructuredReq = 111;</code>
     */
    TypeStructuredReq(38, 111),
    /**
     * <code>TypeStructuredRsp = 112;</code>
     *
     * <pre>
     * 设备上传结构化数据, 如算法中间结果
     * </pre>
     */
    TypeStructuredRsp(39, 112),
    /**
     * <code>TypeCustomizeDataReq = 113;</code>
     */
    TypeCustomizeDataReq(40, 113),
    /**
     * <code>TypeCustomizeDataRsp = 114;</code>
     *
     * <pre>
     * 设备客户定制数据，如单光照数据
     * </pre>
     */
    TypeCustomizeDataRsp(41, 114),
    /**
     * <code>TypeHubTemplateReq = 115;</code>
     */
    TypeHubTemplateReq(42, 115),
    /**
     * <code>TypeHubTemplateRsp = 116;</code>
     *
     * <pre>
     * 网关对终端进行模板配置
     * </pre>
     */
    TypeHubTemplateRsp(43, 116),
    /**
     * <code>TypeDebugReq = 1002;</code>
     */
    TypeDebugReq(44, 1002),
    /**
     * <code>TypeDebugRsp = 1003;</code>
     *
     * <pre>
     * 设备上传调试请求
     * </pre>
     */
    TypeDebugRsp(45, 1003),
    /**
     * <code>TypeSensorReq = 1004;</code>
     */
    TypeSensorReq(46, 1004),
    /**
     * <code>TypeSensorRsp = 1005;</code>
     *
     * <pre>
     * 设备上传传感器数据
     * </pre>
     */
    TypeSensorRsp(47, 1005),
    /**
     * <code>TypePingReq = 1006;</code>
     */
    TypePingReq(48, 1006),
    /**
     * <code>TypePingRsp = 1007;</code>
     *
     * <pre>
     * 设备测试链路
     * </pre>
     */
    TypePingRsp(49, 1007),
    /**
     * <code>TypeAppReq = 1008;</code>
     */
    TypeAppReq(50, 1008),
    /**
     * <code>TypeAppRsp = 1009;</code>
     *
     * <pre>
     * 手机App协商命令
     * </pre>
     */
    TypeAppRsp(51, 1009),
    /**
     * <code>TypeCustomizeCommandReq = 1010;</code>
     */
    TypeCustomizeCommandReq(52, 1010),
    /**
     * <code>TypeCustomizeCommandRsp = 1011;</code>
     *
     * <pre>
     * 发送给终端执行的一次性命令
     * </pre>
     */
    TypeCustomizeCommandRsp(53, 1011),
    /**
     * <code>TypeOEMReq = 1012;</code>
     */
    TypeOEMReq(54, 1012),
    /**
     * <code>TypeOEMRsp = 1013;</code>
     *
     * <pre>
     * 设备读取OEM信息
     * </pre>
     */
    TypeOEMRsp(55, 1013),
    /**
     * <code>TypeHubSettingReq = 1020;</code>
     */
    TypeHubSettingReq(56, 1020),
    /**
     * <code>TypeHubSettingRsp = 1021;</code>
     *
     * <pre>
     * 蓝牙桩setting
     * </pre>
     */
    TypeHubSettingRsp(57, 1021),
    /**
     * <code>TypeSlaveSettingReq = 1022;</code>
     */
    TypeSlaveSettingReq(58, 1022),
    /**
     * <code>TypeSlaveSettingRsp = 1023;</code>
     *
     * <pre>
     * 蓝牙桩下级终端的setting
     * </pre>
     */
    TypeSlaveSettingRsp(59, 1023),
    /**
     * <code>TypeSlaveParameterReq = 1024;</code>
     */
    TypeSlaveParameterReq(60, 1024),
    /**
     * <code>TypeSlaveParameterRsp = 1025;</code>
     *
     * <pre>
     * 蓝牙桩下级终端的parameter
     * </pre>
     */
    TypeSlaveParameterRsp(61, 1025),
    /**
     * <code>TypeBroadcastReq = 1026;</code>
     */
    TypeBroadcastReq(62, 1026),
    /**
     * <code>TypeBroadcastRsp = 1027;</code>
     *
     * <pre>
     * 广播数据上传
     * </pre>
     */
    TypeBroadcastRsp(63, 1027),
    /**
     * <code>TypeFactoryResultReq = 1028;</code>
     */
    TypeFactoryResultReq(64, 1028),
    /**
     * <code>TypeFactoryResultRsp = 1029;</code>
     *
     * <pre>
     * 厂测结果上传
     * </pre>
     */
    TypeFactoryResultRsp(65, 1029),
    /**
     * <code>TypeSlaveDeviceReq = 1030;</code>
     */
    TypeSlaveDeviceReq(66, 1030),
    /**
     * <code>TypeSlaveDeviceRsp = 1031;</code>
     *
     * <pre>
     * 蓝牙桩下级终端列表获取
     * </pre>
     */
    TypeSlaveDeviceRsp(67, 1031),
    /**
     * <code>TypeGatewayEventReq = 1032;</code>
     */
    TypeGatewayEventReq(68, 1032),
    /**
     * <code>TypeGatewayEventRsp = 1033;</code>
     *
     * <pre>
     * 网关检测到的事件
     * </pre>
     */
    TypeGatewayEventRsp(69, 1033),
    /**
     * <code>TypeSummaryReq = 1034;</code>
     */
    TypeSummaryReq(70, 1034),
    /**
     * <code>TypeSummaryRsp = 1035;</code>
     *
     * <pre>
     * 上传摘要数据
     * </pre>
     */
    TypeSummaryRsp(71, 1035),
    /**
     * <code>TypeCommandReq = 1036;</code>
     */
    TypeCommandReq(72, 1036),
    /**
     * <code>TypeCommandRsp = 1037;</code>
     *
     * <pre>
     * 命令下发
     * </pre>
     */
    TypeCommandRsp(73, 1037),
    /**
     * <code>TypeTerminalSettingReq = 1038;</code>
     */
    TypeTerminalSettingReq(74, 1038),
    /**
     * <code>TypeTerminalSettingRsp = 1039;</code>
     *
     * <pre>
     * 终端配置下发
     * </pre>
     */
    TypeTerminalSettingRsp(75, 1039),
    /**
     * <code>TypeTerminalParameterReq = 1040;</code>
     */
    TypeTerminalParameterReq(76, 1040),
    /**
     * <code>TypeTerminalParameterRsp = 1041;</code>
     *
     * <pre>
     * 终端高级配置下发
     * </pre>
     */
    TypeTerminalParameterRsp(77, 1041),
    /**
     * <code>TypeUploadSourceReq = 1050;</code>
     */
    TypeUploadSourceReq(78, 1050),
    /**
     * <code>TypeUploadSourceRsp = 1051;</code>
     *
     * <pre>
     * 数据来源标示
     * </pre>
     */
    TypeUploadSourceRsp(79, 1051),
    /**
     * <code>TypeEventReq = 1060;</code>
     */
    TypeEventReq(80, 1060),
    /**
     * <code>TypeEventRsp = 1061;</code>
     *
     * <pre>
     * 终端自身检测到的事件
     * </pre>
     */
    TypeEventRsp(81, 1061),
    /**
     * <code>TypeBehaviorParameterReq = 1080;</code>
     */
    TypeBehaviorParameterReq(82, 1080),
    /**
     * <code>TypeBehaviorParameterRsp = 1081;</code>
     *
     * <pre>
     * 设备读取行为算法参数
     * </pre>
     */
    TypeBehaviorParameterRsp(83, 1081),
    /**
     * <code>TypeArgosAopReq = 1090;</code>
     */
    TypeArgosAopReq(84, 1090),
    /**
     * <code>TypeArgosAopRsp = 1091;</code>
     *
     * <pre>
     * 设备读取Argos Aop
     * </pre>
     */
    TypeArgosAopRsp(85, 1091),
    /**
     * <code>TypeInventoryResultReq = 1100;</code>
     */
    TypeInventoryResultReq(86, 1100),
    /**
     * <code>TypeInventoryResultRsp = 1101;</code>
     *
     * <pre>
     * 盘点结果主动上传
     * </pre>
     */
    TypeInventoryResultRsp(87, 1101),
    /**
     * <code>TypeBleScanReq = 3000;</code>
     */
    TypeBleScanReq(88, 3000),
    /**
     * <code>TypeBleScanRsp = 3001;</code>
     *
     * <pre>
     * 蓝牙扫描命令
     * </pre>
     */
    TypeBleScanRsp(89, 3001),
    /**
     * <code>TypeBleConnectReq = 3002;</code>
     */
    TypeBleConnectReq(90, 3002),
    /**
     * <code>TypeBleConnectRsp = 3003;</code>
     *
     * <pre>
     * 蓝牙连接命令
     * </pre>
     */
    TypeBleConnectRsp(91, 3003),
    /**
     * <code>TypeBroadcastSummaryReq = 3004;</code>
     */
    TypeBroadcastSummaryReq(92, 3004),
    /**
     * <code>TypeBroadcastSummaryRsp = 3005;</code>
     *
     * <pre>
     *蓝牙桩扫描附近设备
     * </pre>
     */
    TypeBroadcastSummaryRsp(93, 3005),
    ;

    /**
     * <code>TypeRegisterReq = 2;</code>
     */
    public static final int TypeRegisterReq_VALUE = 2;
    /**
     * <code>TypeRegisterRsp = 3;</code>
     *
     * <pre>
     * 设备上传注册信息
     * </pre>
     */
    public static final int TypeRegisterRsp_VALUE = 3;
    /**
     * <code>TypeParameterReq = 4;</code>
     */
    public static final int TypeParameterReq_VALUE = 4;
    /**
     * <code>TypeParameterRsp = 5;</code>
     *
     * <pre>
     * 设备读取参数信息
     * </pre>
     */
    public static final int TypeParameterRsp_VALUE = 5;
    /**
     * <code>TypeSettingReq = 6;</code>
     */
    public static final int TypeSettingReq_VALUE = 6;
    /**
     * <code>TypeSettingRsp = 7;</code>
     *
     * <pre>
     * 设备读取配置信息
     * </pre>
     */
    public static final int TypeSettingRsp_VALUE = 7;
    /**
     * <code>TypeEnvReq = 8;</code>
     */
    public static final int TypeEnvReq_VALUE = 8;
    /**
     * <code>TypeEnvRsp = 9;</code>
     *
     * <pre>
     * 设备上传环境数据
     * </pre>
     */
    public static final int TypeEnvRsp_VALUE = 9;
    /**
     * <code>TypeBehaviorReq = 10;</code>
     */
    public static final int TypeBehaviorReq_VALUE = 10;
    /**
     * <code>TypeBehaviorRsp = 11;</code>
     *
     * <pre>
     * 设备上传行为数据, 第三方平台的行为数据
     * </pre>
     */
    public static final int TypeBehaviorRsp_VALUE = 11;
    /**
     * <code>TypeGPSReq = 12;</code>
     */
    public static final int TypeGPSReq_VALUE = 12;
    /**
     * <code>TypeGPSRsp = 13;</code>
     *
     * <pre>
     * 设备上传定位数据
     * </pre>
     */
    public static final int TypeGPSRsp_VALUE = 13;
    /**
     * <code>TypeCellularReq = 14;</code>
     */
    public static final int TypeCellularReq_VALUE = 14;
    /**
     * <code>TypeCellularRsp = 15;</code>
     *
     * <pre>
     * 设备上传基站数据
     * </pre>
     */
    public static final int TypeCellularRsp_VALUE = 15;
    /**
     * <code>TypeWarningReq = 16;</code>
     */
    public static final int TypeWarningReq_VALUE = 16;
    /**
     * <code>TypeWarningRsp = 17;</code>
     *
     * <pre>
     * 设备上传报警数据
     * </pre>
     */
    public static final int TypeWarningRsp_VALUE = 17;
    /**
     * <code>TypeDownloadReq = 18;</code>
     */
    public static final int TypeDownloadReq_VALUE = 18;
    /**
     * <code>TypeDownloadRsp = 19;</code>
     *
     * <pre>
     * 设备读取固件数据
     * </pre>
     */
    public static final int TypeDownloadRsp_VALUE = 19;
    /**
     * <code>TypeUploadReq = 20;</code>
     */
    public static final int TypeUploadReq_VALUE = 20;
    /**
     * <code>TypeUploadRsp = 21;</code>
     *
     * <pre>
     * 设备打包上传多种类型数据
     * </pre>
     */
    public static final int TypeUploadRsp_VALUE = 21;
    /**
     * <code>TypeSettingAndParamReq = 22;</code>
     */
    public static final int TypeSettingAndParamReq_VALUE = 22;
    /**
     * <code>TypeSettingAndParamRsp = 23;</code>
     *
     * <pre>
     * 设备打包读取参数和配置信息
     * </pre>
     */
    public static final int TypeSettingAndParamRsp_VALUE = 23;
    /**
     * <code>TypeSMSMsg = 24;</code>
     */
    public static final int TypeSMSMsg_VALUE = 24;
    /**
     * <code>TypeSMSRply = 25;</code>
     *
     * <pre>
     * 手机短信控制设备: 封装成协议包后进行Base64编码, 然后通过短信传输
     * </pre>
     */
    public static final int TypeSMSRply_VALUE = 25;
    /**
     * <code>TypeBehavior3Req = 26;</code>
     */
    public static final int TypeBehavior3Req_VALUE = 26;
    /**
     * <code>TypeBehavior3Rsp = 27;</code>
     *
     * <pre>
     * 设备上传行为数据, 内部结构为behavior3
     * </pre>
     */
    public static final int TypeBehavior3Rsp_VALUE = 27;
    /**
     * <code>TypeTriggerReq = 28;</code>
     */
    public static final int TypeTriggerReq_VALUE = 28;
    /**
     * <code>TypeTriggerRsp = 29;</code>
     *
     * <pre>
     * 设备读取触发器信息
     * </pre>
     */
    public static final int TypeTriggerRsp_VALUE = 29;
    /**
     * <code>TypeEstrusReq = 100;</code>
     */
    public static final int TypeEstrusReq_VALUE = 100;
    /**
     * <code>TypeEstrusRsp = 101;</code>
     *
     * <pre>
     * 设备上传发情feature
     * </pre>
     */
    public static final int TypeEstrusRsp_VALUE = 101;
    /**
     * <code>TypeOriginReq = 102;</code>
     */
    public static final int TypeOriginReq_VALUE = 102;
    /**
     * <code>TypeOriginRsp = 103;</code>
     *
     * <pre>
     * 设备上传加速度原始数据
     * </pre>
     */
    public static final int TypeOriginRsp_VALUE = 103;
    /**
     * <code>TypeErrorReq = 104;</code>
     */
    public static final int TypeErrorReq_VALUE = 104;
    /**
     * <code>TypeErrorRsp = 105;</code>
     *
     * <pre>
     * 设备上传错误数据，原状态数据
     * </pre>
     */
    public static final int TypeErrorRsp_VALUE = 105;
    /**
     * <code>TypeBehavior2Req = 106;</code>
     */
    public static final int TypeBehavior2Req_VALUE = 106;
    /**
     * <code>TypeBehavior2Rsp = 107;</code>
     *
     * <pre>
     * 设备上传ODBA数据, 内部结构为behavior2
     * </pre>
     */
    public static final int TypeBehavior2Rsp_VALUE = 107;
    /**
     * <code>TypeOrigin2Req = 109;</code>
     */
    public static final int TypeOrigin2Req_VALUE = 109;
    /**
     * <code>TypeOrigin2Rsp = 110;</code>
     *
     * <pre>
     * 设备上传加速度原始数据, v2
     * </pre>
     */
    public static final int TypeOrigin2Rsp_VALUE = 110;
    /**
     * <code>TypeStructuredReq = 111;</code>
     */
    public static final int TypeStructuredReq_VALUE = 111;
    /**
     * <code>TypeStructuredRsp = 112;</code>
     *
     * <pre>
     * 设备上传结构化数据, 如算法中间结果
     * </pre>
     */
    public static final int TypeStructuredRsp_VALUE = 112;
    /**
     * <code>TypeCustomizeDataReq = 113;</code>
     */
    public static final int TypeCustomizeDataReq_VALUE = 113;
    /**
     * <code>TypeCustomizeDataRsp = 114;</code>
     *
     * <pre>
     * 设备客户定制数据，如单光照数据
     * </pre>
     */
    public static final int TypeCustomizeDataRsp_VALUE = 114;
    /**
     * <code>TypeHubTemplateReq = 115;</code>
     */
    public static final int TypeHubTemplateReq_VALUE = 115;
    /**
     * <code>TypeHubTemplateRsp = 116;</code>
     *
     * <pre>
     * 网关对终端进行模板配置
     * </pre>
     */
    public static final int TypeHubTemplateRsp_VALUE = 116;
    /**
     * <code>TypeDebugReq = 1002;</code>
     */
    public static final int TypeDebugReq_VALUE = 1002;
    /**
     * <code>TypeDebugRsp = 1003;</code>
     *
     * <pre>
     * 设备上传调试请求
     * </pre>
     */
    public static final int TypeDebugRsp_VALUE = 1003;
    /**
     * <code>TypeSensorReq = 1004;</code>
     */
    public static final int TypeSensorReq_VALUE = 1004;
    /**
     * <code>TypeSensorRsp = 1005;</code>
     *
     * <pre>
     * 设备上传传感器数据
     * </pre>
     */
    public static final int TypeSensorRsp_VALUE = 1005;
    /**
     * <code>TypePingReq = 1006;</code>
     */
    public static final int TypePingReq_VALUE = 1006;
    /**
     * <code>TypePingRsp = 1007;</code>
     *
     * <pre>
     * 设备测试链路
     * </pre>
     */
    public static final int TypePingRsp_VALUE = 1007;
    /**
     * <code>TypeAppReq = 1008;</code>
     */
    public static final int TypeAppReq_VALUE = 1008;
    /**
     * <code>TypeAppRsp = 1009;</code>
     *
     * <pre>
     * 手机App协商命令
     * </pre>
     */
    public static final int TypeAppRsp_VALUE = 1009;
    /**
     * <code>TypeCustomizeCommandReq = 1010;</code>
     */
    public static final int TypeCustomizeCommandReq_VALUE = 1010;
    /**
     * <code>TypeCustomizeCommandRsp = 1011;</code>
     *
     * <pre>
     * 发送给终端执行的一次性命令
     * </pre>
     */
    public static final int TypeCustomizeCommandRsp_VALUE = 1011;
    /**
     * <code>TypeOEMReq = 1012;</code>
     */
    public static final int TypeOEMReq_VALUE = 1012;
    /**
     * <code>TypeOEMRsp = 1013;</code>
     *
     * <pre>
     * 设备读取OEM信息
     * </pre>
     */
    public static final int TypeOEMRsp_VALUE = 1013;
    /**
     * <code>TypeHubSettingReq = 1020;</code>
     */
    public static final int TypeHubSettingReq_VALUE = 1020;
    /**
     * <code>TypeHubSettingRsp = 1021;</code>
     *
     * <pre>
     * 蓝牙桩setting
     * </pre>
     */
    public static final int TypeHubSettingRsp_VALUE = 1021;
    /**
     * <code>TypeSlaveSettingReq = 1022;</code>
     */
    public static final int TypeSlaveSettingReq_VALUE = 1022;
    /**
     * <code>TypeSlaveSettingRsp = 1023;</code>
     *
     * <pre>
     * 蓝牙桩下级终端的setting
     * </pre>
     */
    public static final int TypeSlaveSettingRsp_VALUE = 1023;
    /**
     * <code>TypeSlaveParameterReq = 1024;</code>
     */
    public static final int TypeSlaveParameterReq_VALUE = 1024;
    /**
     * <code>TypeSlaveParameterRsp = 1025;</code>
     *
     * <pre>
     * 蓝牙桩下级终端的parameter
     * </pre>
     */
    public static final int TypeSlaveParameterRsp_VALUE = 1025;
    /**
     * <code>TypeBroadcastReq = 1026;</code>
     */
    public static final int TypeBroadcastReq_VALUE = 1026;
    /**
     * <code>TypeBroadcastRsp = 1027;</code>
     *
     * <pre>
     * 广播数据上传
     * </pre>
     */
    public static final int TypeBroadcastRsp_VALUE = 1027;
    /**
     * <code>TypeFactoryResultReq = 1028;</code>
     */
    public static final int TypeFactoryResultReq_VALUE = 1028;
    /**
     * <code>TypeFactoryResultRsp = 1029;</code>
     *
     * <pre>
     * 厂测结果上传
     * </pre>
     */
    public static final int TypeFactoryResultRsp_VALUE = 1029;
    /**
     * <code>TypeSlaveDeviceReq = 1030;</code>
     */
    public static final int TypeSlaveDeviceReq_VALUE = 1030;
    /**
     * <code>TypeSlaveDeviceRsp = 1031;</code>
     *
     * <pre>
     * 蓝牙桩下级终端列表获取
     * </pre>
     */
    public static final int TypeSlaveDeviceRsp_VALUE = 1031;
    /**
     * <code>TypeGatewayEventReq = 1032;</code>
     */
    public static final int TypeGatewayEventReq_VALUE = 1032;
    /**
     * <code>TypeGatewayEventRsp = 1033;</code>
     *
     * <pre>
     * 网关检测到的事件
     * </pre>
     */
    public static final int TypeGatewayEventRsp_VALUE = 1033;
    /**
     * <code>TypeSummaryReq = 1034;</code>
     */
    public static final int TypeSummaryReq_VALUE = 1034;
    /**
     * <code>TypeSummaryRsp = 1035;</code>
     *
     * <pre>
     * 上传摘要数据
     * </pre>
     */
    public static final int TypeSummaryRsp_VALUE = 1035;
    /**
     * <code>TypeCommandReq = 1036;</code>
     */
    public static final int TypeCommandReq_VALUE = 1036;
    /**
     * <code>TypeCommandRsp = 1037;</code>
     *
     * <pre>
     * 命令下发
     * </pre>
     */
    public static final int TypeCommandRsp_VALUE = 1037;
    /**
     * <code>TypeTerminalSettingReq = 1038;</code>
     */
    public static final int TypeTerminalSettingReq_VALUE = 1038;
    /**
     * <code>TypeTerminalSettingRsp = 1039;</code>
     *
     * <pre>
     * 终端配置下发
     * </pre>
     */
    public static final int TypeTerminalSettingRsp_VALUE = 1039;
    /**
     * <code>TypeTerminalParameterReq = 1040;</code>
     */
    public static final int TypeTerminalParameterReq_VALUE = 1040;
    /**
     * <code>TypeTerminalParameterRsp = 1041;</code>
     *
     * <pre>
     * 终端高级配置下发
     * </pre>
     */
    public static final int TypeTerminalParameterRsp_VALUE = 1041;
    /**
     * <code>TypeUploadSourceReq = 1050;</code>
     */
    public static final int TypeUploadSourceReq_VALUE = 1050;
    /**
     * <code>TypeUploadSourceRsp = 1051;</code>
     *
     * <pre>
     * 数据来源标示
     * </pre>
     */
    public static final int TypeUploadSourceRsp_VALUE = 1051;
    /**
     * <code>TypeEventReq = 1060;</code>
     */
    public static final int TypeEventReq_VALUE = 1060;
    /**
     * <code>TypeEventRsp = 1061;</code>
     *
     * <pre>
     * 终端自身检测到的事件
     * </pre>
     */
    public static final int TypeEventRsp_VALUE = 1061;
    /**
     * <code>TypeBehaviorParameterReq = 1080;</code>
     */
    public static final int TypeBehaviorParameterReq_VALUE = 1080;
    /**
     * <code>TypeBehaviorParameterRsp = 1081;</code>
     *
     * <pre>
     * 设备读取行为算法参数
     * </pre>
     */
    public static final int TypeBehaviorParameterRsp_VALUE = 1081;
    /**
     * <code>TypeArgosAopReq = 1090;</code>
     */
    public static final int TypeArgosAopReq_VALUE = 1090;
    /**
     * <code>TypeArgosAopRsp = 1091;</code>
     *
     * <pre>
     * 设备读取Argos Aop
     * </pre>
     */
    public static final int TypeArgosAopRsp_VALUE = 1091;
    /**
     * <code>TypeInventoryResultReq = 1100;</code>
     */
    public static final int TypeInventoryResultReq_VALUE = 1100;
    /**
     * <code>TypeInventoryResultRsp = 1101;</code>
     *
     * <pre>
     * 盘点结果主动上传
     * </pre>
     */
    public static final int TypeInventoryResultRsp_VALUE = 1101;
    /**
     * <code>TypeBleScanReq = 3000;</code>
     */
    public static final int TypeBleScanReq_VALUE = 3000;
    /**
     * <code>TypeBleScanRsp = 3001;</code>
     *
     * <pre>
     * 蓝牙扫描命令
     * </pre>
     */
    public static final int TypeBleScanRsp_VALUE = 3001;
    /**
     * <code>TypeBleConnectReq = 3002;</code>
     */
    public static final int TypeBleConnectReq_VALUE = 3002;
    /**
     * <code>TypeBleConnectRsp = 3003;</code>
     *
     * <pre>
     * 蓝牙连接命令
     * </pre>
     */
    public static final int TypeBleConnectRsp_VALUE = 3003;
    /**
     * <code>TypeBroadcastSummaryReq = 3004;</code>
     */
    public static final int TypeBroadcastSummaryReq_VALUE = 3004;
    /**
     * <code>TypeBroadcastSummaryRsp = 3005;</code>
     *
     * <pre>
     *蓝牙桩扫描附近设备
     * </pre>
     */
    public static final int TypeBroadcastSummaryRsp_VALUE = 3005;


    public final int getNumber() {
      return value;
    }

    public static HeaderType valueOf(int value) {
      switch (value) {
        case 2: return TypeRegisterReq;
        case 3: return TypeRegisterRsp;
        case 4: return TypeParameterReq;
        case 5: return TypeParameterRsp;
        case 6: return TypeSettingReq;
        case 7: return TypeSettingRsp;
        case 8: return TypeEnvReq;
        case 9: return TypeEnvRsp;
        case 10: return TypeBehaviorReq;
        case 11: return TypeBehaviorRsp;
        case 12: return TypeGPSReq;
        case 13: return TypeGPSRsp;
        case 14: return TypeCellularReq;
        case 15: return TypeCellularRsp;
        case 16: return TypeWarningReq;
        case 17: return TypeWarningRsp;
        case 18: return TypeDownloadReq;
        case 19: return TypeDownloadRsp;
        case 20: return TypeUploadReq;
        case 21: return TypeUploadRsp;
        case 22: return TypeSettingAndParamReq;
        case 23: return TypeSettingAndParamRsp;
        case 24: return TypeSMSMsg;
        case 25: return TypeSMSRply;
        case 26: return TypeBehavior3Req;
        case 27: return TypeBehavior3Rsp;
        case 28: return TypeTriggerReq;
        case 29: return TypeTriggerRsp;
        case 100: return TypeEstrusReq;
        case 101: return TypeEstrusRsp;
        case 102: return TypeOriginReq;
        case 103: return TypeOriginRsp;
        case 104: return TypeErrorReq;
        case 105: return TypeErrorRsp;
        case 106: return TypeBehavior2Req;
        case 107: return TypeBehavior2Rsp;
        case 109: return TypeOrigin2Req;
        case 110: return TypeOrigin2Rsp;
        case 111: return TypeStructuredReq;
        case 112: return TypeStructuredRsp;
        case 113: return TypeCustomizeDataReq;
        case 114: return TypeCustomizeDataRsp;
        case 115: return TypeHubTemplateReq;
        case 116: return TypeHubTemplateRsp;
        case 1002: return TypeDebugReq;
        case 1003: return TypeDebugRsp;
        case 1004: return TypeSensorReq;
        case 1005: return TypeSensorRsp;
        case 1006: return TypePingReq;
        case 1007: return TypePingRsp;
        case 1008: return TypeAppReq;
        case 1009: return TypeAppRsp;
        case 1010: return TypeCustomizeCommandReq;
        case 1011: return TypeCustomizeCommandRsp;
        case 1012: return TypeOEMReq;
        case 1013: return TypeOEMRsp;
        case 1020: return TypeHubSettingReq;
        case 1021: return TypeHubSettingRsp;
        case 1022: return TypeSlaveSettingReq;
        case 1023: return TypeSlaveSettingRsp;
        case 1024: return TypeSlaveParameterReq;
        case 1025: return TypeSlaveParameterRsp;
        case 1026: return TypeBroadcastReq;
        case 1027: return TypeBroadcastRsp;
        case 1028: return TypeFactoryResultReq;
        case 1029: return TypeFactoryResultRsp;
        case 1030: return TypeSlaveDeviceReq;
        case 1031: return TypeSlaveDeviceRsp;
        case 1032: return TypeGatewayEventReq;
        case 1033: return TypeGatewayEventRsp;
        case 1034: return TypeSummaryReq;
        case 1035: return TypeSummaryRsp;
        case 1036: return TypeCommandReq;
        case 1037: return TypeCommandRsp;
        case 1038: return TypeTerminalSettingReq;
        case 1039: return TypeTerminalSettingRsp;
        case 1040: return TypeTerminalParameterReq;
        case 1041: return TypeTerminalParameterRsp;
        case 1050: return TypeUploadSourceReq;
        case 1051: return TypeUploadSourceRsp;
        case 1060: return TypeEventReq;
        case 1061: return TypeEventRsp;
        case 1080: return TypeBehaviorParameterReq;
        case 1081: return TypeBehaviorParameterRsp;
        case 1090: return TypeArgosAopReq;
        case 1091: return TypeArgosAopRsp;
        case 1100: return TypeInventoryResultReq;
        case 1101: return TypeInventoryResultRsp;
        case 3000: return TypeBleScanReq;
        case 3001: return TypeBleScanRsp;
        case 3002: return TypeBleConnectReq;
        case 3003: return TypeBleConnectRsp;
        case 3004: return TypeBroadcastSummaryReq;
        case 3005: return TypeBroadcastSummaryRsp;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HeaderType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HeaderType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HeaderType>() {
            public HeaderType findValueByNumber(int number) {
              return HeaderType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return protocol_v1.V1Define.getDescriptor().getEnumTypes().get(0);
    }

    private static final HeaderType[] VALUES = values();

    public static HeaderType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private HeaderType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:protocol_v1.HeaderType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017v1.Define.proto\022\013protocol_v1*\321\020\n\nHeade" +
      "rType\022\023\n\017TypeRegisterReq\020\002\022\023\n\017TypeRegist" +
      "erRsp\020\003\022\024\n\020TypeParameterReq\020\004\022\024\n\020TypePar" +
      "ameterRsp\020\005\022\022\n\016TypeSettingReq\020\006\022\022\n\016TypeS" +
      "ettingRsp\020\007\022\016\n\nTypeEnvReq\020\010\022\016\n\nTypeEnvRs" +
      "p\020\t\022\023\n\017TypeBehaviorReq\020\n\022\023\n\017TypeBehavior" +
      "Rsp\020\013\022\016\n\nTypeGPSReq\020\014\022\016\n\nTypeGPSRsp\020\r\022\023\n" +
      "\017TypeCellularReq\020\016\022\023\n\017TypeCellularRsp\020\017\022" +
      "\022\n\016TypeWarningReq\020\020\022\022\n\016TypeWarningRsp\020\021\022" +
      "\023\n\017TypeDownloadReq\020\022\022\023\n\017TypeDownloadRsp\020",
      "\023\022\021\n\rTypeUploadReq\020\024\022\021\n\rTypeUploadRsp\020\025\022" +
      "\032\n\026TypeSettingAndParamReq\020\026\022\032\n\026TypeSetti" +
      "ngAndParamRsp\020\027\022\016\n\nTypeSMSMsg\020\030\022\017\n\013TypeS" +
      "MSRply\020\031\022\024\n\020TypeBehavior3Req\020\032\022\024\n\020TypeBe" +
      "havior3Rsp\020\033\022\022\n\016TypeTriggerReq\020\034\022\022\n\016Type" +
      "TriggerRsp\020\035\022\021\n\rTypeEstrusReq\020d\022\021\n\rTypeE" +
      "strusRsp\020e\022\021\n\rTypeOriginReq\020f\022\021\n\rTypeOri" +
      "ginRsp\020g\022\020\n\014TypeErrorReq\020h\022\020\n\014TypeErrorR" +
      "sp\020i\022\024\n\020TypeBehavior2Req\020j\022\024\n\020TypeBehavi" +
      "or2Rsp\020k\022\022\n\016TypeOrigin2Req\020m\022\022\n\016TypeOrig",
      "in2Rsp\020n\022\025\n\021TypeStructuredReq\020o\022\025\n\021TypeS" +
      "tructuredRsp\020p\022\030\n\024TypeCustomizeDataReq\020q" +
      "\022\030\n\024TypeCustomizeDataRsp\020r\022\026\n\022TypeHubTem" +
      "plateReq\020s\022\026\n\022TypeHubTemplateRsp\020t\022\021\n\014Ty" +
      "peDebugReq\020\352\007\022\021\n\014TypeDebugRsp\020\353\007\022\022\n\rType" +
      "SensorReq\020\354\007\022\022\n\rTypeSensorRsp\020\355\007\022\020\n\013Type" +
      "PingReq\020\356\007\022\020\n\013TypePingRsp\020\357\007\022\017\n\nTypeAppR" +
      "eq\020\360\007\022\017\n\nTypeAppRsp\020\361\007\022\034\n\027TypeCustomizeC" +
      "ommandReq\020\362\007\022\034\n\027TypeCustomizeCommandRsp\020" +
      "\363\007\022\017\n\nTypeOEMReq\020\364\007\022\017\n\nTypeOEMRsp\020\365\007\022\026\n\021",
      "TypeHubSettingReq\020\374\007\022\026\n\021TypeHubSettingRs" +
      "p\020\375\007\022\030\n\023TypeSlaveSettingReq\020\376\007\022\030\n\023TypeSl" +
      "aveSettingRsp\020\377\007\022\032\n\025TypeSlaveParameterRe" +
      "q\020\200\010\022\032\n\025TypeSlaveParameterRsp\020\201\010\022\025\n\020Type" +
      "BroadcastReq\020\202\010\022\025\n\020TypeBroadcastRsp\020\203\010\022\031" +
      "\n\024TypeFactoryResultReq\020\204\010\022\031\n\024TypeFactory" +
      "ResultRsp\020\205\010\022\027\n\022TypeSlaveDeviceReq\020\206\010\022\027\n" +
      "\022TypeSlaveDeviceRsp\020\207\010\022\030\n\023TypeGatewayEve" +
      "ntReq\020\210\010\022\030\n\023TypeGatewayEventRsp\020\211\010\022\023\n\016Ty" +
      "peSummaryReq\020\212\010\022\023\n\016TypeSummaryRsp\020\213\010\022\023\n\016",
      "TypeCommandReq\020\214\010\022\023\n\016TypeCommandRsp\020\215\010\022\033" +
      "\n\026TypeTerminalSettingReq\020\216\010\022\033\n\026TypeTermi" +
      "nalSettingRsp\020\217\010\022\035\n\030TypeTerminalParamete" +
      "rReq\020\220\010\022\035\n\030TypeTerminalParameterRsp\020\221\010\022\030" +
      "\n\023TypeUploadSourceReq\020\232\010\022\030\n\023TypeUploadSo" +
      "urceRsp\020\233\010\022\021\n\014TypeEventReq\020\244\010\022\021\n\014TypeEve" +
      "ntRsp\020\245\010\022\035\n\030TypeBehaviorParameterReq\020\270\010\022" +
      "\035\n\030TypeBehaviorParameterRsp\020\271\010\022\024\n\017TypeAr" +
      "gosAopReq\020\302\010\022\024\n\017TypeArgosAopRsp\020\303\010\022\033\n\026Ty" +
      "peInventoryResultReq\020\314\010\022\033\n\026TypeInventory",
      "ResultRsp\020\315\010\022\023\n\016TypeBleScanReq\020\270\027\022\023\n\016Typ" +
      "eBleScanRsp\020\271\027\022\026\n\021TypeBleConnectReq\020\272\027\022\026" +
      "\n\021TypeBleConnectRsp\020\273\027\022\034\n\027TypeBroadcastS" +
      "ummaryReq\020\274\027\022\034\n\027TypeBroadcastSummaryRsp\020" +
      "\275\027B\005\242\002\002V1"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
