// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1.Cellular.proto

package protocol_v1;

public final class V1Cellular {
  private V1Cellular() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CellularReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protocol_v1.CellularReq)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    boolean hasIden();
    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    protocol_v1.V1IdentityMsg.IdentityMsg getIden();
    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder getIdenOrBuilder();

    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    java.util.List<protocol_v1.V1Cellular.Cellular> 
        getCellularInfoList();
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    protocol_v1.V1Cellular.Cellular getCellularInfo(int index);
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    int getCellularInfoCount();
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    java.util.List<? extends protocol_v1.V1Cellular.CellularOrBuilder> 
        getCellularInfoOrBuilderList();
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    protocol_v1.V1Cellular.CellularOrBuilder getCellularInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code protocol_v1.CellularReq}
   *
   * <pre>
   * 请求上传基站数据
   * </pre>
   */
  public  static final class CellularReq extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:protocol_v1.CellularReq)
      CellularReqOrBuilder {
    // Use CellularReq.newBuilder() to construct.
    private CellularReq(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CellularReq() {
      cellularInfo_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CellularReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protocol_v1.V1IdentityMsg.IdentityMsg.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = iden_.toBuilder();
              }
              iden_ = input.readMessage(protocol_v1.V1IdentityMsg.IdentityMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(iden_);
                iden_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cellularInfo_ = new java.util.ArrayList<protocol_v1.V1Cellular.Cellular>();
                mutable_bitField0_ |= 0x00000002;
              }
              cellularInfo_.add(input.readMessage(protocol_v1.V1Cellular.Cellular.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cellularInfo_ = java.util.Collections.unmodifiableList(cellularInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_CellularReq_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_CellularReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol_v1.V1Cellular.CellularReq.class, protocol_v1.V1Cellular.CellularReq.Builder.class);
    }

    private int bitField0_;
    public static final int IDEN_FIELD_NUMBER = 1;
    private protocol_v1.V1IdentityMsg.IdentityMsg iden_;
    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    public boolean hasIden() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    public protocol_v1.V1IdentityMsg.IdentityMsg getIden() {
      return iden_ == null ? protocol_v1.V1IdentityMsg.IdentityMsg.getDefaultInstance() : iden_;
    }
    /**
     * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
     */
    public protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder getIdenOrBuilder() {
      return iden_ == null ? protocol_v1.V1IdentityMsg.IdentityMsg.getDefaultInstance() : iden_;
    }

    public static final int CELLULARINFO_FIELD_NUMBER = 2;
    private java.util.List<protocol_v1.V1Cellular.Cellular> cellularInfo_;
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    public java.util.List<protocol_v1.V1Cellular.Cellular> getCellularInfoList() {
      return cellularInfo_;
    }
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    public java.util.List<? extends protocol_v1.V1Cellular.CellularOrBuilder> 
        getCellularInfoOrBuilderList() {
      return cellularInfo_;
    }
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    public int getCellularInfoCount() {
      return cellularInfo_.size();
    }
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    public protocol_v1.V1Cellular.Cellular getCellularInfo(int index) {
      return cellularInfo_.get(index);
    }
    /**
     * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
     */
    public protocol_v1.V1Cellular.CellularOrBuilder getCellularInfoOrBuilder(
        int index) {
      return cellularInfo_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIden()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getIden().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCellularInfoCount(); i++) {
        if (!getCellularInfo(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getIden());
      }
      for (int i = 0; i < cellularInfo_.size(); i++) {
        output.writeMessage(2, cellularInfo_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIden());
      }
      for (int i = 0; i < cellularInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cellularInfo_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.CellularReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protocol_v1.V1Cellular.CellularReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.CellularReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol_v1.V1Cellular.CellularReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protocol_v1.CellularReq}
     *
     * <pre>
     * 请求上传基站数据
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protocol_v1.CellularReq)
        protocol_v1.V1Cellular.CellularReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_CellularReq_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_CellularReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol_v1.V1Cellular.CellularReq.class, protocol_v1.V1Cellular.CellularReq.Builder.class);
      }

      // Construct using protocol_v1.V1Cellular.CellularReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getIdenFieldBuilder();
          getCellularInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (idenBuilder_ == null) {
          iden_ = null;
        } else {
          idenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cellularInfoBuilder_ == null) {
          cellularInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cellularInfoBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_CellularReq_descriptor;
      }

      public protocol_v1.V1Cellular.CellularReq getDefaultInstanceForType() {
        return protocol_v1.V1Cellular.CellularReq.getDefaultInstance();
      }

      public protocol_v1.V1Cellular.CellularReq build() {
        protocol_v1.V1Cellular.CellularReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol_v1.V1Cellular.CellularReq buildPartial() {
        protocol_v1.V1Cellular.CellularReq result = new protocol_v1.V1Cellular.CellularReq(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (idenBuilder_ == null) {
          result.iden_ = iden_;
        } else {
          result.iden_ = idenBuilder_.build();
        }
        if (cellularInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cellularInfo_ = java.util.Collections.unmodifiableList(cellularInfo_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cellularInfo_ = cellularInfo_;
        } else {
          result.cellularInfo_ = cellularInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol_v1.V1Cellular.CellularReq) {
          return mergeFrom((protocol_v1.V1Cellular.CellularReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol_v1.V1Cellular.CellularReq other) {
        if (other == protocol_v1.V1Cellular.CellularReq.getDefaultInstance()) return this;
        if (other.hasIden()) {
          mergeIden(other.getIden());
        }
        if (cellularInfoBuilder_ == null) {
          if (!other.cellularInfo_.isEmpty()) {
            if (cellularInfo_.isEmpty()) {
              cellularInfo_ = other.cellularInfo_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCellularInfoIsMutable();
              cellularInfo_.addAll(other.cellularInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.cellularInfo_.isEmpty()) {
            if (cellularInfoBuilder_.isEmpty()) {
              cellularInfoBuilder_.dispose();
              cellularInfoBuilder_ = null;
              cellularInfo_ = other.cellularInfo_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cellularInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCellularInfoFieldBuilder() : null;
            } else {
              cellularInfoBuilder_.addAllMessages(other.cellularInfo_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIden()) {
          return false;
        }
        if (!getIden().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getCellularInfoCount(); i++) {
          if (!getCellularInfo(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol_v1.V1Cellular.CellularReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol_v1.V1Cellular.CellularReq) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private protocol_v1.V1IdentityMsg.IdentityMsg iden_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          protocol_v1.V1IdentityMsg.IdentityMsg, protocol_v1.V1IdentityMsg.IdentityMsg.Builder, protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder> idenBuilder_;
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public boolean hasIden() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public protocol_v1.V1IdentityMsg.IdentityMsg getIden() {
        if (idenBuilder_ == null) {
          return iden_ == null ? protocol_v1.V1IdentityMsg.IdentityMsg.getDefaultInstance() : iden_;
        } else {
          return idenBuilder_.getMessage();
        }
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public Builder setIden(protocol_v1.V1IdentityMsg.IdentityMsg value) {
        if (idenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          iden_ = value;
          onChanged();
        } else {
          idenBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public Builder setIden(
          protocol_v1.V1IdentityMsg.IdentityMsg.Builder builderForValue) {
        if (idenBuilder_ == null) {
          iden_ = builderForValue.build();
          onChanged();
        } else {
          idenBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public Builder mergeIden(protocol_v1.V1IdentityMsg.IdentityMsg value) {
        if (idenBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              iden_ != null &&
              iden_ != protocol_v1.V1IdentityMsg.IdentityMsg.getDefaultInstance()) {
            iden_ =
              protocol_v1.V1IdentityMsg.IdentityMsg.newBuilder(iden_).mergeFrom(value).buildPartial();
          } else {
            iden_ = value;
          }
          onChanged();
        } else {
          idenBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public Builder clearIden() {
        if (idenBuilder_ == null) {
          iden_ = null;
          onChanged();
        } else {
          idenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public protocol_v1.V1IdentityMsg.IdentityMsg.Builder getIdenBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getIdenFieldBuilder().getBuilder();
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      public protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder getIdenOrBuilder() {
        if (idenBuilder_ != null) {
          return idenBuilder_.getMessageOrBuilder();
        } else {
          return iden_ == null ?
              protocol_v1.V1IdentityMsg.IdentityMsg.getDefaultInstance() : iden_;
        }
      }
      /**
       * <code>required .protocol_v1.IdentityMsg Iden = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protocol_v1.V1IdentityMsg.IdentityMsg, protocol_v1.V1IdentityMsg.IdentityMsg.Builder, protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder> 
          getIdenFieldBuilder() {
        if (idenBuilder_ == null) {
          idenBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protocol_v1.V1IdentityMsg.IdentityMsg, protocol_v1.V1IdentityMsg.IdentityMsg.Builder, protocol_v1.V1IdentityMsg.IdentityMsgOrBuilder>(
                  getIden(),
                  getParentForChildren(),
                  isClean());
          iden_ = null;
        }
        return idenBuilder_;
      }

      private java.util.List<protocol_v1.V1Cellular.Cellular> cellularInfo_ =
        java.util.Collections.emptyList();
      private void ensureCellularInfoIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cellularInfo_ = new java.util.ArrayList<protocol_v1.V1Cellular.Cellular>(cellularInfo_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protocol_v1.V1Cellular.Cellular, protocol_v1.V1Cellular.Cellular.Builder, protocol_v1.V1Cellular.CellularOrBuilder> cellularInfoBuilder_;

      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public java.util.List<protocol_v1.V1Cellular.Cellular> getCellularInfoList() {
        if (cellularInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cellularInfo_);
        } else {
          return cellularInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public int getCellularInfoCount() {
        if (cellularInfoBuilder_ == null) {
          return cellularInfo_.size();
        } else {
          return cellularInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public protocol_v1.V1Cellular.Cellular getCellularInfo(int index) {
        if (cellularInfoBuilder_ == null) {
          return cellularInfo_.get(index);
        } else {
          return cellularInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder setCellularInfo(
          int index, protocol_v1.V1Cellular.Cellular value) {
        if (cellularInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellularInfoIsMutable();
          cellularInfo_.set(index, value);
          onChanged();
        } else {
          cellularInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder setCellularInfo(
          int index, protocol_v1.V1Cellular.Cellular.Builder builderForValue) {
        if (cellularInfoBuilder_ == null) {
          ensureCellularInfoIsMutable();
          cellularInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          cellularInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder addCellularInfo(protocol_v1.V1Cellular.Cellular value) {
        if (cellularInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellularInfoIsMutable();
          cellularInfo_.add(value);
          onChanged();
        } else {
          cellularInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder addCellularInfo(
          int index, protocol_v1.V1Cellular.Cellular value) {
        if (cellularInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellularInfoIsMutable();
          cellularInfo_.add(index, value);
          onChanged();
        } else {
          cellularInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder addCellularInfo(
          protocol_v1.V1Cellular.Cellular.Builder builderForValue) {
        if (cellularInfoBuilder_ == null) {
          ensureCellularInfoIsMutable();
          cellularInfo_.add(builderForValue.build());
          onChanged();
        } else {
          cellularInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder addCellularInfo(
          int index, protocol_v1.V1Cellular.Cellular.Builder builderForValue) {
        if (cellularInfoBuilder_ == null) {
          ensureCellularInfoIsMutable();
          cellularInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          cellularInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder addAllCellularInfo(
          java.lang.Iterable<? extends protocol_v1.V1Cellular.Cellular> values) {
        if (cellularInfoBuilder_ == null) {
          ensureCellularInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cellularInfo_);
          onChanged();
        } else {
          cellularInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder clearCellularInfo() {
        if (cellularInfoBuilder_ == null) {
          cellularInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cellularInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public Builder removeCellularInfo(int index) {
        if (cellularInfoBuilder_ == null) {
          ensureCellularInfoIsMutable();
          cellularInfo_.remove(index);
          onChanged();
        } else {
          cellularInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public protocol_v1.V1Cellular.Cellular.Builder getCellularInfoBuilder(
          int index) {
        return getCellularInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public protocol_v1.V1Cellular.CellularOrBuilder getCellularInfoOrBuilder(
          int index) {
        if (cellularInfoBuilder_ == null) {
          return cellularInfo_.get(index);  } else {
          return cellularInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public java.util.List<? extends protocol_v1.V1Cellular.CellularOrBuilder> 
           getCellularInfoOrBuilderList() {
        if (cellularInfoBuilder_ != null) {
          return cellularInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cellularInfo_);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public protocol_v1.V1Cellular.Cellular.Builder addCellularInfoBuilder() {
        return getCellularInfoFieldBuilder().addBuilder(
            protocol_v1.V1Cellular.Cellular.getDefaultInstance());
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public protocol_v1.V1Cellular.Cellular.Builder addCellularInfoBuilder(
          int index) {
        return getCellularInfoFieldBuilder().addBuilder(
            index, protocol_v1.V1Cellular.Cellular.getDefaultInstance());
      }
      /**
       * <code>repeated .protocol_v1.Cellular CellularInfo = 2;</code>
       */
      public java.util.List<protocol_v1.V1Cellular.Cellular.Builder> 
           getCellularInfoBuilderList() {
        return getCellularInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protocol_v1.V1Cellular.Cellular, protocol_v1.V1Cellular.Cellular.Builder, protocol_v1.V1Cellular.CellularOrBuilder> 
          getCellularInfoFieldBuilder() {
        if (cellularInfoBuilder_ == null) {
          cellularInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protocol_v1.V1Cellular.Cellular, protocol_v1.V1Cellular.Cellular.Builder, protocol_v1.V1Cellular.CellularOrBuilder>(
                  cellularInfo_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cellularInfo_ = null;
        }
        return cellularInfoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:protocol_v1.CellularReq)
    }

    // @@protoc_insertion_point(class_scope:protocol_v1.CellularReq)
    private static final protocol_v1.V1Cellular.CellularReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol_v1.V1Cellular.CellularReq();
    }

    public static protocol_v1.V1Cellular.CellularReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CellularReq>
        PARSER = new com.google.protobuf.AbstractParser<CellularReq>() {
      public CellularReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new CellularReq(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<CellularReq> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CellularReq> getParserForType() {
      return PARSER;
    }

    public protocol_v1.V1Cellular.CellularReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protocol_v1.Cell)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 CellID = 1;</code>
     *
     * <pre>
     * 基站ID
     * </pre>
     */
    boolean hasCellID();
    /**
     * <code>required int32 CellID = 1;</code>
     *
     * <pre>
     * 基站ID
     * </pre>
     */
    int getCellID();

    /**
     * <code>optional int32 Serving = 2 [default = 0];</code>
     *
     * <pre>
     * 0 - 邻近小区, 1 - 服务小区
     * </pre>
     */
    boolean hasServing();
    /**
     * <code>optional int32 Serving = 2 [default = 0];</code>
     *
     * <pre>
     * 0 - 邻近小区, 1 - 服务小区
     * </pre>
     */
    int getServing();

    /**
     * <code>optional int32 Type = 3 [default = 0];</code>
     *
     * <pre>
     * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 Type = 3 [default = 0];</code>
     *
     * <pre>
     * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
     * </pre>
     */
    int getType();

    /**
     * <code>optional int32 MCC = 4 [default = 0];</code>
     *
     * <pre>
     * 国家代码
     * </pre>
     */
    boolean hasMCC();
    /**
     * <code>optional int32 MCC = 4 [default = 0];</code>
     *
     * <pre>
     * 国家代码
     * </pre>
     */
    int getMCC();

    /**
     * <code>optional int32 MNC = 5 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    boolean hasMNC();
    /**
     * <code>optional int32 MNC = 5 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    int getMNC();

    /**
     * <code>optional int32 BSIC = 6 [default = 0];</code>
     *
     * <pre>
     * 基站代码: 2G
     * </pre>
     */
    boolean hasBSIC();
    /**
     * <code>optional int32 BSIC = 6 [default = 0];</code>
     *
     * <pre>
     * 基站代码: 2G
     * </pre>
     */
    int getBSIC();

    /**
     * <code>optional int32 LAC = 7 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 2G/3G
     * </pre>
     */
    boolean hasLAC();
    /**
     * <code>optional int32 LAC = 7 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 2G/3G
     * </pre>
     */
    int getLAC();

    /**
     * <code>optional int32 TAC = 8 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 4G
     * </pre>
     */
    boolean hasTAC();
    /**
     * <code>optional int32 TAC = 8 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 4G
     * </pre>
     */
    int getTAC();

    /**
     * <code>optional int32 ARFCN = 9 [default = 0];</code>
     *
     * <pre>
     * 频点
     * </pre>
     */
    boolean hasARFCN();
    /**
     * <code>optional int32 ARFCN = 9 [default = 0];</code>
     *
     * <pre>
     * 频点
     * </pre>
     */
    int getARFCN();

    /**
     * <code>optional sint32 RxLevel = 10 [default = 99];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    boolean hasRxLevel();
    /**
     * <code>optional sint32 RxLevel = 10 [default = 99];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    int getRxLevel();

    /**
     * <code>optional sint32 RxQuality = 11 [default = 99];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    boolean hasRxQuality();
    /**
     * <code>optional sint32 RxQuality = 11 [default = 99];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    int getRxQuality();

    /**
     * <code>optional sint32 RSSI = 12 [default = 99];</code>
     *
     * <pre>
     * 接收信号强度(dBm)
     * </pre>
     */
    boolean hasRSSI();
    /**
     * <code>optional sint32 RSSI = 12 [default = 99];</code>
     *
     * <pre>
     * 接收信号强度(dBm)
     * </pre>
     */
    int getRSSI();

    /**
     * <code>optional int32 PhysCellID = 13 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    boolean hasPhysCellID();
    /**
     * <code>optional int32 PhysCellID = 13 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    int getPhysCellID();
  }
  /**
   * Protobuf type {@code protocol_v1.Cell}
   */
  public  static final class Cell extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:protocol_v1.Cell)
      CellOrBuilder {
    // Use Cell.newBuilder() to construct.
    private Cell(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Cell() {
      cellID_ = 0;
      serving_ = 0;
      type_ = 0;
      mCC_ = 0;
      mNC_ = 0;
      bSIC_ = 0;
      lAC_ = 0;
      tAC_ = 0;
      aRFCN_ = 0;
      rxLevel_ = 99;
      rxQuality_ = 99;
      rSSI_ = 99;
      physCellID_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Cell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cellID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              serving_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              type_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mCC_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mNC_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              bSIC_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              lAC_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              tAC_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              aRFCN_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              rxLevel_ = input.readSInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              rxQuality_ = input.readSInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              rSSI_ = input.readSInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              physCellID_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_Cell_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_Cell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol_v1.V1Cellular.Cell.class, protocol_v1.V1Cellular.Cell.Builder.class);
    }

    private int bitField0_;
    public static final int CELLID_FIELD_NUMBER = 1;
    private int cellID_;
    /**
     * <code>required int32 CellID = 1;</code>
     *
     * <pre>
     * 基站ID
     * </pre>
     */
    public boolean hasCellID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 CellID = 1;</code>
     *
     * <pre>
     * 基站ID
     * </pre>
     */
    public int getCellID() {
      return cellID_;
    }

    public static final int SERVING_FIELD_NUMBER = 2;
    private int serving_;
    /**
     * <code>optional int32 Serving = 2 [default = 0];</code>
     *
     * <pre>
     * 0 - 邻近小区, 1 - 服务小区
     * </pre>
     */
    public boolean hasServing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 Serving = 2 [default = 0];</code>
     *
     * <pre>
     * 0 - 邻近小区, 1 - 服务小区
     * </pre>
     */
    public int getServing() {
      return serving_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>optional int32 Type = 3 [default = 0];</code>
     *
     * <pre>
     * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 Type = 3 [default = 0];</code>
     *
     * <pre>
     * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
     * </pre>
     */
    public int getType() {
      return type_;
    }

    public static final int MCC_FIELD_NUMBER = 4;
    private int mCC_;
    /**
     * <code>optional int32 MCC = 4 [default = 0];</code>
     *
     * <pre>
     * 国家代码
     * </pre>
     */
    public boolean hasMCC() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 MCC = 4 [default = 0];</code>
     *
     * <pre>
     * 国家代码
     * </pre>
     */
    public int getMCC() {
      return mCC_;
    }

    public static final int MNC_FIELD_NUMBER = 5;
    private int mNC_;
    /**
     * <code>optional int32 MNC = 5 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    public boolean hasMNC() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 MNC = 5 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    public int getMNC() {
      return mNC_;
    }

    public static final int BSIC_FIELD_NUMBER = 6;
    private int bSIC_;
    /**
     * <code>optional int32 BSIC = 6 [default = 0];</code>
     *
     * <pre>
     * 基站代码: 2G
     * </pre>
     */
    public boolean hasBSIC() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 BSIC = 6 [default = 0];</code>
     *
     * <pre>
     * 基站代码: 2G
     * </pre>
     */
    public int getBSIC() {
      return bSIC_;
    }

    public static final int LAC_FIELD_NUMBER = 7;
    private int lAC_;
    /**
     * <code>optional int32 LAC = 7 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 2G/3G
     * </pre>
     */
    public boolean hasLAC() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 LAC = 7 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 2G/3G
     * </pre>
     */
    public int getLAC() {
      return lAC_;
    }

    public static final int TAC_FIELD_NUMBER = 8;
    private int tAC_;
    /**
     * <code>optional int32 TAC = 8 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 4G
     * </pre>
     */
    public boolean hasTAC() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 TAC = 8 [default = 0];</code>
     *
     * <pre>
     * 定位区域码: 4G
     * </pre>
     */
    public int getTAC() {
      return tAC_;
    }

    public static final int ARFCN_FIELD_NUMBER = 9;
    private int aRFCN_;
    /**
     * <code>optional int32 ARFCN = 9 [default = 0];</code>
     *
     * <pre>
     * 频点
     * </pre>
     */
    public boolean hasARFCN() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ARFCN = 9 [default = 0];</code>
     *
     * <pre>
     * 频点
     * </pre>
     */
    public int getARFCN() {
      return aRFCN_;
    }

    public static final int RXLEVEL_FIELD_NUMBER = 10;
    private int rxLevel_;
    /**
     * <code>optional sint32 RxLevel = 10 [default = 99];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    public boolean hasRxLevel() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional sint32 RxLevel = 10 [default = 99];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    public int getRxLevel() {
      return rxLevel_;
    }

    public static final int RXQUALITY_FIELD_NUMBER = 11;
    private int rxQuality_;
    /**
     * <code>optional sint32 RxQuality = 11 [default = 99];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    public boolean hasRxQuality() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional sint32 RxQuality = 11 [default = 99];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    public int getRxQuality() {
      return rxQuality_;
    }

    public static final int RSSI_FIELD_NUMBER = 12;
    private int rSSI_;
    /**
     * <code>optional sint32 RSSI = 12 [default = 99];</code>
     *
     * <pre>
     * 接收信号强度(dBm)
     * </pre>
     */
    public boolean hasRSSI() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional sint32 RSSI = 12 [default = 99];</code>
     *
     * <pre>
     * 接收信号强度(dBm)
     * </pre>
     */
    public int getRSSI() {
      return rSSI_;
    }

    public static final int PHYSCELLID_FIELD_NUMBER = 13;
    private int physCellID_;
    /**
     * <code>optional int32 PhysCellID = 13 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    public boolean hasPhysCellID() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 PhysCellID = 13 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    public int getPhysCellID() {
      return physCellID_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCellID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cellID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, serving_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mCC_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, mNC_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, bSIC_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, lAC_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, tAC_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, aRFCN_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeSInt32(10, rxLevel_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeSInt32(11, rxQuality_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeSInt32(12, rSSI_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, physCellID_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cellID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, serving_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, mCC_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, mNC_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, bSIC_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, lAC_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, tAC_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, aRFCN_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, rxLevel_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, rxQuality_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(12, rSSI_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, physCellID_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static protocol_v1.V1Cellular.Cell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protocol_v1.V1Cellular.Cell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.Cell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol_v1.V1Cellular.Cell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protocol_v1.Cell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protocol_v1.Cell)
        protocol_v1.V1Cellular.CellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cell_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol_v1.V1Cellular.Cell.class, protocol_v1.V1Cellular.Cell.Builder.class);
      }

      // Construct using protocol_v1.V1Cellular.Cell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cellID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        serving_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mCC_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mNC_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        bSIC_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        lAC_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        tAC_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        aRFCN_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        rxLevel_ = 99;
        bitField0_ = (bitField0_ & ~0x00000200);
        rxQuality_ = 99;
        bitField0_ = (bitField0_ & ~0x00000400);
        rSSI_ = 99;
        bitField0_ = (bitField0_ & ~0x00000800);
        physCellID_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cell_descriptor;
      }

      public protocol_v1.V1Cellular.Cell getDefaultInstanceForType() {
        return protocol_v1.V1Cellular.Cell.getDefaultInstance();
      }

      public protocol_v1.V1Cellular.Cell build() {
        protocol_v1.V1Cellular.Cell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol_v1.V1Cellular.Cell buildPartial() {
        protocol_v1.V1Cellular.Cell result = new protocol_v1.V1Cellular.Cell(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cellID_ = cellID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serving_ = serving_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mCC_ = mCC_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mNC_ = mNC_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.bSIC_ = bSIC_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.lAC_ = lAC_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.tAC_ = tAC_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.aRFCN_ = aRFCN_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.rxLevel_ = rxLevel_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.rxQuality_ = rxQuality_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rSSI_ = rSSI_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.physCellID_ = physCellID_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol_v1.V1Cellular.Cell) {
          return mergeFrom((protocol_v1.V1Cellular.Cell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol_v1.V1Cellular.Cell other) {
        if (other == protocol_v1.V1Cellular.Cell.getDefaultInstance()) return this;
        if (other.hasCellID()) {
          setCellID(other.getCellID());
        }
        if (other.hasServing()) {
          setServing(other.getServing());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMCC()) {
          setMCC(other.getMCC());
        }
        if (other.hasMNC()) {
          setMNC(other.getMNC());
        }
        if (other.hasBSIC()) {
          setBSIC(other.getBSIC());
        }
        if (other.hasLAC()) {
          setLAC(other.getLAC());
        }
        if (other.hasTAC()) {
          setTAC(other.getTAC());
        }
        if (other.hasARFCN()) {
          setARFCN(other.getARFCN());
        }
        if (other.hasRxLevel()) {
          setRxLevel(other.getRxLevel());
        }
        if (other.hasRxQuality()) {
          setRxQuality(other.getRxQuality());
        }
        if (other.hasRSSI()) {
          setRSSI(other.getRSSI());
        }
        if (other.hasPhysCellID()) {
          setPhysCellID(other.getPhysCellID());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCellID()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol_v1.V1Cellular.Cell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol_v1.V1Cellular.Cell) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cellID_ ;
      /**
       * <code>required int32 CellID = 1;</code>
       *
       * <pre>
       * 基站ID
       * </pre>
       */
      public boolean hasCellID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 CellID = 1;</code>
       *
       * <pre>
       * 基站ID
       * </pre>
       */
      public int getCellID() {
        return cellID_;
      }
      /**
       * <code>required int32 CellID = 1;</code>
       *
       * <pre>
       * 基站ID
       * </pre>
       */
      public Builder setCellID(int value) {
        bitField0_ |= 0x00000001;
        cellID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CellID = 1;</code>
       *
       * <pre>
       * 基站ID
       * </pre>
       */
      public Builder clearCellID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cellID_ = 0;
        onChanged();
        return this;
      }

      private int serving_ ;
      /**
       * <code>optional int32 Serving = 2 [default = 0];</code>
       *
       * <pre>
       * 0 - 邻近小区, 1 - 服务小区
       * </pre>
       */
      public boolean hasServing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Serving = 2 [default = 0];</code>
       *
       * <pre>
       * 0 - 邻近小区, 1 - 服务小区
       * </pre>
       */
      public int getServing() {
        return serving_;
      }
      /**
       * <code>optional int32 Serving = 2 [default = 0];</code>
       *
       * <pre>
       * 0 - 邻近小区, 1 - 服务小区
       * </pre>
       */
      public Builder setServing(int value) {
        bitField0_ |= 0x00000002;
        serving_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 Serving = 2 [default = 0];</code>
       *
       * <pre>
       * 0 - 邻近小区, 1 - 服务小区
       * </pre>
       */
      public Builder clearServing() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serving_ = 0;
        onChanged();
        return this;
      }

      private int type_ ;
      /**
       * <code>optional int32 Type = 3 [default = 0];</code>
       *
       * <pre>
       * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 Type = 3 [default = 0];</code>
       *
       * <pre>
       * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 Type = 3 [default = 0];</code>
       *
       * <pre>
       * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 Type = 3 [default = 0];</code>
       *
       * <pre>
       * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 0;
        onChanged();
        return this;
      }

      private int mCC_ ;
      /**
       * <code>optional int32 MCC = 4 [default = 0];</code>
       *
       * <pre>
       * 国家代码
       * </pre>
       */
      public boolean hasMCC() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 MCC = 4 [default = 0];</code>
       *
       * <pre>
       * 国家代码
       * </pre>
       */
      public int getMCC() {
        return mCC_;
      }
      /**
       * <code>optional int32 MCC = 4 [default = 0];</code>
       *
       * <pre>
       * 国家代码
       * </pre>
       */
      public Builder setMCC(int value) {
        bitField0_ |= 0x00000008;
        mCC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 MCC = 4 [default = 0];</code>
       *
       * <pre>
       * 国家代码
       * </pre>
       */
      public Builder clearMCC() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mCC_ = 0;
        onChanged();
        return this;
      }

      private int mNC_ ;
      /**
       * <code>optional int32 MNC = 5 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public boolean hasMNC() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 MNC = 5 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public int getMNC() {
        return mNC_;
      }
      /**
       * <code>optional int32 MNC = 5 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public Builder setMNC(int value) {
        bitField0_ |= 0x00000010;
        mNC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 MNC = 5 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public Builder clearMNC() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mNC_ = 0;
        onChanged();
        return this;
      }

      private int bSIC_ ;
      /**
       * <code>optional int32 BSIC = 6 [default = 0];</code>
       *
       * <pre>
       * 基站代码: 2G
       * </pre>
       */
      public boolean hasBSIC() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 BSIC = 6 [default = 0];</code>
       *
       * <pre>
       * 基站代码: 2G
       * </pre>
       */
      public int getBSIC() {
        return bSIC_;
      }
      /**
       * <code>optional int32 BSIC = 6 [default = 0];</code>
       *
       * <pre>
       * 基站代码: 2G
       * </pre>
       */
      public Builder setBSIC(int value) {
        bitField0_ |= 0x00000020;
        bSIC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 BSIC = 6 [default = 0];</code>
       *
       * <pre>
       * 基站代码: 2G
       * </pre>
       */
      public Builder clearBSIC() {
        bitField0_ = (bitField0_ & ~0x00000020);
        bSIC_ = 0;
        onChanged();
        return this;
      }

      private int lAC_ ;
      /**
       * <code>optional int32 LAC = 7 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 2G/3G
       * </pre>
       */
      public boolean hasLAC() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 LAC = 7 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 2G/3G
       * </pre>
       */
      public int getLAC() {
        return lAC_;
      }
      /**
       * <code>optional int32 LAC = 7 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 2G/3G
       * </pre>
       */
      public Builder setLAC(int value) {
        bitField0_ |= 0x00000040;
        lAC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 LAC = 7 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 2G/3G
       * </pre>
       */
      public Builder clearLAC() {
        bitField0_ = (bitField0_ & ~0x00000040);
        lAC_ = 0;
        onChanged();
        return this;
      }

      private int tAC_ ;
      /**
       * <code>optional int32 TAC = 8 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 4G
       * </pre>
       */
      public boolean hasTAC() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 TAC = 8 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 4G
       * </pre>
       */
      public int getTAC() {
        return tAC_;
      }
      /**
       * <code>optional int32 TAC = 8 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 4G
       * </pre>
       */
      public Builder setTAC(int value) {
        bitField0_ |= 0x00000080;
        tAC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 TAC = 8 [default = 0];</code>
       *
       * <pre>
       * 定位区域码: 4G
       * </pre>
       */
      public Builder clearTAC() {
        bitField0_ = (bitField0_ & ~0x00000080);
        tAC_ = 0;
        onChanged();
        return this;
      }

      private int aRFCN_ ;
      /**
       * <code>optional int32 ARFCN = 9 [default = 0];</code>
       *
       * <pre>
       * 频点
       * </pre>
       */
      public boolean hasARFCN() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ARFCN = 9 [default = 0];</code>
       *
       * <pre>
       * 频点
       * </pre>
       */
      public int getARFCN() {
        return aRFCN_;
      }
      /**
       * <code>optional int32 ARFCN = 9 [default = 0];</code>
       *
       * <pre>
       * 频点
       * </pre>
       */
      public Builder setARFCN(int value) {
        bitField0_ |= 0x00000100;
        aRFCN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ARFCN = 9 [default = 0];</code>
       *
       * <pre>
       * 频点
       * </pre>
       */
      public Builder clearARFCN() {
        bitField0_ = (bitField0_ & ~0x00000100);
        aRFCN_ = 0;
        onChanged();
        return this;
      }

      private int rxLevel_ = 99;
      /**
       * <code>optional sint32 RxLevel = 10 [default = 99];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public boolean hasRxLevel() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 RxLevel = 10 [default = 99];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public int getRxLevel() {
        return rxLevel_;
      }
      /**
       * <code>optional sint32 RxLevel = 10 [default = 99];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public Builder setRxLevel(int value) {
        bitField0_ |= 0x00000200;
        rxLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 RxLevel = 10 [default = 99];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public Builder clearRxLevel() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rxLevel_ = 99;
        onChanged();
        return this;
      }

      private int rxQuality_ = 99;
      /**
       * <code>optional sint32 RxQuality = 11 [default = 99];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public boolean hasRxQuality() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 RxQuality = 11 [default = 99];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public int getRxQuality() {
        return rxQuality_;
      }
      /**
       * <code>optional sint32 RxQuality = 11 [default = 99];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public Builder setRxQuality(int value) {
        bitField0_ |= 0x00000400;
        rxQuality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 RxQuality = 11 [default = 99];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public Builder clearRxQuality() {
        bitField0_ = (bitField0_ & ~0x00000400);
        rxQuality_ = 99;
        onChanged();
        return this;
      }

      private int rSSI_ = 99;
      /**
       * <code>optional sint32 RSSI = 12 [default = 99];</code>
       *
       * <pre>
       * 接收信号强度(dBm)
       * </pre>
       */
      public boolean hasRSSI() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional sint32 RSSI = 12 [default = 99];</code>
       *
       * <pre>
       * 接收信号强度(dBm)
       * </pre>
       */
      public int getRSSI() {
        return rSSI_;
      }
      /**
       * <code>optional sint32 RSSI = 12 [default = 99];</code>
       *
       * <pre>
       * 接收信号强度(dBm)
       * </pre>
       */
      public Builder setRSSI(int value) {
        bitField0_ |= 0x00000800;
        rSSI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 RSSI = 12 [default = 99];</code>
       *
       * <pre>
       * 接收信号强度(dBm)
       * </pre>
       */
      public Builder clearRSSI() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rSSI_ = 99;
        onChanged();
        return this;
      }

      private int physCellID_ ;
      /**
       * <code>optional int32 PhysCellID = 13 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public boolean hasPhysCellID() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 PhysCellID = 13 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public int getPhysCellID() {
        return physCellID_;
      }
      /**
       * <code>optional int32 PhysCellID = 13 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public Builder setPhysCellID(int value) {
        bitField0_ |= 0x00001000;
        physCellID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 PhysCellID = 13 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public Builder clearPhysCellID() {
        bitField0_ = (bitField0_ & ~0x00001000);
        physCellID_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protocol_v1.Cell)
    }

    // @@protoc_insertion_point(class_scope:protocol_v1.Cell)
    private static final protocol_v1.V1Cellular.Cell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol_v1.V1Cellular.Cell();
    }

    public static protocol_v1.V1Cellular.Cell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Cell>
        PARSER = new com.google.protobuf.AbstractParser<Cell>() {
      public Cell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Cell(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Cell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cell> getParserForType() {
      return PARSER;
    }

    public protocol_v1.V1Cellular.Cell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CellularOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protocol_v1.Cellular)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 Timestamp = 1 [default = 0];</code>
     *
     * <pre>
     * 结束时间
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional uint32 Timestamp = 1 [default = 0];</code>
     *
     * <pre>
     * 结束时间
     * </pre>
     */
    int getTimestamp();

    /**
     * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
     *
     * <pre>
     * 纬度: 度, 精度到小数点后第7位
     * </pre>
     */
    boolean hasLatitude();
    /**
     * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
     *
     * <pre>
     * 纬度: 度, 精度到小数点后第7位
     * </pre>
     */
    int getLatitude();

    /**
     * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
     *
     * <pre>
     * 经度: 度, 精度到小数点后第7位
     * </pre>
     */
    boolean hasLongitude();
    /**
     * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
     *
     * <pre>
     * 经度: 度, 精度到小数点后第7位
     * </pre>
     */
    int getLongitude();

    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    java.util.List<protocol_v1.V1Cellular.Cell> 
        getCellInfoList();
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    protocol_v1.V1Cellular.Cell getCellInfo(int index);
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    int getCellInfoCount();
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    java.util.List<? extends protocol_v1.V1Cellular.CellOrBuilder> 
        getCellInfoOrBuilderList();
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    protocol_v1.V1Cellular.CellOrBuilder getCellInfoOrBuilder(
        int index);

    /**
     * <code>optional int32 SampleType = 20 [default = 0];</code>
     *
     * <pre>
     * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
     * </pre>
     */
    boolean hasSampleType();
    /**
     * <code>optional int32 SampleType = 20 [default = 0];</code>
     *
     * <pre>
     * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
     * </pre>
     */
    int getSampleType();

    /**
     * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
     *
     * <pre>
     * 错误标志
     * </pre>
     */
    boolean hasErrorFlag();
    /**
     * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
     *
     * <pre>
     * 错误标志
     * </pre>
     */
    int getErrorFlag();

    /**
     * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
     *
     * <pre>
     * 退出状态
     * </pre>
     */
    boolean hasExitFlag();
    /**
     * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
     *
     * <pre>
     * 退出状态
     * </pre>
     */
    int getExitFlag();

    /**
     * <code>optional int32 TotalTime = 103 [default = 0];</code>
     *
     * <pre>
     * 通信总耗时
     * </pre>
     */
    boolean hasTotalTime();
    /**
     * <code>optional int32 TotalTime = 103 [default = 0];</code>
     *
     * <pre>
     * 通信总耗时
     * </pre>
     */
    int getTotalTime();

    /**
     * <code>optional int32 HwtTime = 104 [default = 0];</code>
     *
     * <pre>
     * 硬件测试耗时
     * </pre>
     */
    boolean hasHwtTime();
    /**
     * <code>optional int32 HwtTime = 104 [default = 0];</code>
     *
     * <pre>
     * 硬件测试耗时
     * </pre>
     */
    int getHwtTime();

    /**
     * <code>optional int32 SimTime = 105 [default = 0];</code>
     *
     * <pre>
     * SIM卡检测耗时
     * </pre>
     */
    boolean hasSimTime();
    /**
     * <code>optional int32 SimTime = 105 [default = 0];</code>
     *
     * <pre>
     * SIM卡检测耗时
     * </pre>
     */
    int getSimTime();

    /**
     * <code>optional int32 NumTime = 106 [default = 0];</code>
     *
     * <pre>
     * 读电话号码耗时
     * </pre>
     */
    boolean hasNumTime();
    /**
     * <code>optional int32 NumTime = 106 [default = 0];</code>
     *
     * <pre>
     * 读电话号码耗时
     * </pre>
     */
    int getNumTime();

    /**
     * <code>optional int32 RssiTime = 107 [default = 0];</code>
     *
     * <pre>
     * 信号检测耗时
     * </pre>
     */
    boolean hasRssiTime();
    /**
     * <code>optional int32 RssiTime = 107 [default = 0];</code>
     *
     * <pre>
     * 信号检测耗时
     * </pre>
     */
    int getRssiTime();

    /**
     * <code>optional int32 RegisterTime = 108 [default = 0];</code>
     *
     * <pre>
     * 注网耗时
     * </pre>
     */
    boolean hasRegisterTime();
    /**
     * <code>optional int32 RegisterTime = 108 [default = 0];</code>
     *
     * <pre>
     * 注网耗时
     * </pre>
     */
    int getRegisterTime();

    /**
     * <code>optional int32 AttachTime = 109 [default = 0];</code>
     *
     * <pre>
     * 附着GPRS耗时
     * </pre>
     */
    boolean hasAttachTime();
    /**
     * <code>optional int32 AttachTime = 109 [default = 0];</code>
     *
     * <pre>
     * 附着GPRS耗时
     * </pre>
     */
    int getAttachTime();

    /**
     * <code>optional int32 PdpTime = 110 [default = 0];</code>
     *
     * <pre>
     * 激活移动场景耗时
     * </pre>
     */
    boolean hasPdpTime();
    /**
     * <code>optional int32 PdpTime = 110 [default = 0];</code>
     *
     * <pre>
     * 激活移动场景耗时
     * </pre>
     */
    int getPdpTime();

    /**
     * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
     *
     * <pre>
     * 连接耗时
     * </pre>
     */
    boolean hasConnectionTime();
    /**
     * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
     *
     * <pre>
     * 连接耗时
     * </pre>
     */
    int getConnectionTime();

    /**
     * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
     *
     * <pre>
     * 数传耗时
     * </pre>
     */
    boolean hasCommunicationTime();
    /**
     * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
     *
     * <pre>
     * 数传耗时
     * </pre>
     */
    int getCommunicationTime();

    /**
     * <code>optional int32 SmsTime = 113 [default = 0];</code>
     *
     * <pre>
     * 发短信耗时
     * </pre>
     */
    boolean hasSmsTime();
    /**
     * <code>optional int32 SmsTime = 113 [default = 0];</code>
     *
     * <pre>
     * 发短信耗时
     * </pre>
     */
    int getSmsTime();

    /**
     * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    boolean hasNetworkOperator();
    /**
     * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    int getNetworkOperator();

    /**
     * <code>optional int32 SignalStrength = 115 [default = 0];</code>
     *
     * <pre>
     * 信号强度
     * </pre>
     */
    boolean hasSignalStrength();
    /**
     * <code>optional int32 SignalStrength = 115 [default = 0];</code>
     *
     * <pre>
     * 信号强度
     * </pre>
     */
    int getSignalStrength();

    /**
     * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
     *
     * <pre>
     * 误码率
     * </pre>
     */
    boolean hasBitErrorRate();
    /**
     * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
     *
     * <pre>
     * 误码率
     * </pre>
     */
    int getBitErrorRate();

    /**
     * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
     *
     * <pre>
     * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
     * </pre>
     */
    boolean hasRadioAccessTechnology();
    /**
     * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
     *
     * <pre>
     * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
     * </pre>
     */
    int getRadioAccessTechnology();

    /**
     * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
     *
     * <pre>
     * 覆盖等级
     * </pre>
     */
    boolean hasCoverageExtensionLevel();
    /**
     * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
     *
     * <pre>
     * 覆盖等级
     * </pre>
     */
    int getCoverageExtensionLevel();

    /**
     * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
     *
     * <pre>
     * 信噪比
     * </pre>
     */
    boolean hasSignalToNoiseRatio();
    /**
     * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
     *
     * <pre>
     * 信噪比
     * </pre>
     */
    int getSignalToNoiseRatio();

    /**
     * <code>optional int32 CellID = 120 [default = 0];</code>
     *
     * <pre>
     * 蜂窝ID
     * </pre>
     */
    boolean hasCellID();
    /**
     * <code>optional int32 CellID = 120 [default = 0];</code>
     *
     * <pre>
     * 蜂窝ID
     * </pre>
     */
    int getCellID();

    /**
     * <code>optional int32 Temperature = 121 [default = 0];</code>
     *
     * <pre>
     * 内部温度: 摄氏度, 精确到小数点后一位
     * </pre>
     */
    boolean hasTemperature();
    /**
     * <code>optional int32 Temperature = 121 [default = 0];</code>
     *
     * <pre>
     * 内部温度: 摄氏度, 精确到小数点后一位
     * </pre>
     */
    int getTemperature();

    /**
     * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
     *
     * <pre>
     * 电池电压: 毫伏, 精度到0.001V
     * </pre>
     */
    boolean hasBatteryVoltage();
    /**
     * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
     *
     * <pre>
     * 电池电压: 毫伏, 精度到0.001V
     * </pre>
     */
    int getBatteryVoltage();

    /**
     * <code>optional int32 LAC = 123 [default = 0];</code>
     *
     * <pre>
     * 蜂窝LAC
     * </pre>
     */
    boolean hasLAC();
    /**
     * <code>optional int32 LAC = 123 [default = 0];</code>
     *
     * <pre>
     * 蜂窝LAC
     * </pre>
     */
    int getLAC();

    /**
     * <code>optional int32 PhysCellID = 124 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    boolean hasPhysCellID();
    /**
     * <code>optional int32 PhysCellID = 124 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    int getPhysCellID();

    /**
     * <code>optional sint32 RxLevel = 125 [default = -999];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    boolean hasRxLevel();
    /**
     * <code>optional sint32 RxLevel = 125 [default = -999];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    int getRxLevel();

    /**
     * <code>optional sint32 RxQuality = 126 [default = -999];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    boolean hasRxQuality();
    /**
     * <code>optional sint32 RxQuality = 126 [default = -999];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    int getRxQuality();
  }
  /**
   * Protobuf type {@code protocol_v1.Cellular}
   */
  public  static final class Cellular extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:protocol_v1.Cellular)
      CellularOrBuilder {
    // Use Cellular.newBuilder() to construct.
    private Cellular(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Cellular() {
      timestamp_ = 0;
      latitude_ = 2000000000;
      longitude_ = 2000000000;
      cellInfo_ = java.util.Collections.emptyList();
      sampleType_ = 0;
      errorFlag_ = 0;
      exitFlag_ = 0;
      totalTime_ = 0;
      hwtTime_ = 0;
      simTime_ = 0;
      numTime_ = 0;
      rssiTime_ = 0;
      registerTime_ = 0;
      attachTime_ = 0;
      pdpTime_ = 0;
      connectionTime_ = 0;
      communicationTime_ = 0;
      smsTime_ = 0;
      networkOperator_ = 0;
      signalStrength_ = 0;
      bitErrorRate_ = 0;
      radioAccessTechnology_ = 0;
      coverageExtensionLevel_ = 0;
      signalToNoiseRatio_ = -999;
      cellID_ = 0;
      temperature_ = 0;
      batteryVoltage_ = 0;
      lAC_ = 0;
      physCellID_ = 0;
      rxLevel_ = -999;
      rxQuality_ = -999;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Cellular(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              timestamp_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              latitude_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              longitude_ = input.readSInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cellInfo_ = new java.util.ArrayList<protocol_v1.V1Cellular.Cell>();
                mutable_bitField0_ |= 0x00000008;
              }
              cellInfo_.add(input.readMessage(protocol_v1.V1Cellular.Cell.parser(), extensionRegistry));
              break;
            }
            case 160: {
              bitField0_ |= 0x00000008;
              sampleType_ = input.readInt32();
              break;
            }
            case 808: {
              bitField0_ |= 0x00000010;
              errorFlag_ = input.readUInt32();
              break;
            }
            case 816: {
              bitField0_ |= 0x00000020;
              exitFlag_ = input.readUInt32();
              break;
            }
            case 824: {
              bitField0_ |= 0x00000040;
              totalTime_ = input.readInt32();
              break;
            }
            case 832: {
              bitField0_ |= 0x00000080;
              hwtTime_ = input.readInt32();
              break;
            }
            case 840: {
              bitField0_ |= 0x00000100;
              simTime_ = input.readInt32();
              break;
            }
            case 848: {
              bitField0_ |= 0x00000200;
              numTime_ = input.readInt32();
              break;
            }
            case 856: {
              bitField0_ |= 0x00000400;
              rssiTime_ = input.readInt32();
              break;
            }
            case 864: {
              bitField0_ |= 0x00000800;
              registerTime_ = input.readInt32();
              break;
            }
            case 872: {
              bitField0_ |= 0x00001000;
              attachTime_ = input.readInt32();
              break;
            }
            case 880: {
              bitField0_ |= 0x00002000;
              pdpTime_ = input.readInt32();
              break;
            }
            case 888: {
              bitField0_ |= 0x00004000;
              connectionTime_ = input.readInt32();
              break;
            }
            case 896: {
              bitField0_ |= 0x00008000;
              communicationTime_ = input.readInt32();
              break;
            }
            case 904: {
              bitField0_ |= 0x00010000;
              smsTime_ = input.readInt32();
              break;
            }
            case 912: {
              bitField0_ |= 0x00020000;
              networkOperator_ = input.readUInt32();
              break;
            }
            case 920: {
              bitField0_ |= 0x00040000;
              signalStrength_ = input.readInt32();
              break;
            }
            case 928: {
              bitField0_ |= 0x00080000;
              bitErrorRate_ = input.readInt32();
              break;
            }
            case 936: {
              bitField0_ |= 0x00100000;
              radioAccessTechnology_ = input.readInt32();
              break;
            }
            case 944: {
              bitField0_ |= 0x00200000;
              coverageExtensionLevel_ = input.readSInt32();
              break;
            }
            case 952: {
              bitField0_ |= 0x00400000;
              signalToNoiseRatio_ = input.readSInt32();
              break;
            }
            case 960: {
              bitField0_ |= 0x00800000;
              cellID_ = input.readInt32();
              break;
            }
            case 968: {
              bitField0_ |= 0x01000000;
              temperature_ = input.readInt32();
              break;
            }
            case 976: {
              bitField0_ |= 0x02000000;
              batteryVoltage_ = input.readInt32();
              break;
            }
            case 984: {
              bitField0_ |= 0x04000000;
              lAC_ = input.readInt32();
              break;
            }
            case 992: {
              bitField0_ |= 0x08000000;
              physCellID_ = input.readInt32();
              break;
            }
            case 1000: {
              bitField0_ |= 0x10000000;
              rxLevel_ = input.readSInt32();
              break;
            }
            case 1008: {
              bitField0_ |= 0x20000000;
              rxQuality_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cellInfo_ = java.util.Collections.unmodifiableList(cellInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_Cellular_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol_v1.V1Cellular.internal_static_protocol_v1_Cellular_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol_v1.V1Cellular.Cellular.class, protocol_v1.V1Cellular.Cellular.Builder.class);
    }

    private int bitField0_;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private int timestamp_;
    /**
     * <code>optional uint32 Timestamp = 1 [default = 0];</code>
     *
     * <pre>
     * 结束时间
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 Timestamp = 1 [default = 0];</code>
     *
     * <pre>
     * 结束时间
     * </pre>
     */
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int LATITUDE_FIELD_NUMBER = 2;
    private int latitude_;
    /**
     * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
     *
     * <pre>
     * 纬度: 度, 精度到小数点后第7位
     * </pre>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
     *
     * <pre>
     * 纬度: 度, 精度到小数点后第7位
     * </pre>
     */
    public int getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private int longitude_;
    /**
     * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
     *
     * <pre>
     * 经度: 度, 精度到小数点后第7位
     * </pre>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
     *
     * <pre>
     * 经度: 度, 精度到小数点后第7位
     * </pre>
     */
    public int getLongitude() {
      return longitude_;
    }

    public static final int CELLINFO_FIELD_NUMBER = 4;
    private java.util.List<protocol_v1.V1Cellular.Cell> cellInfo_;
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    public java.util.List<protocol_v1.V1Cellular.Cell> getCellInfoList() {
      return cellInfo_;
    }
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    public java.util.List<? extends protocol_v1.V1Cellular.CellOrBuilder> 
        getCellInfoOrBuilderList() {
      return cellInfo_;
    }
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    public int getCellInfoCount() {
      return cellInfo_.size();
    }
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    public protocol_v1.V1Cellular.Cell getCellInfo(int index) {
      return cellInfo_.get(index);
    }
    /**
     * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
     *
     * <pre>
     * 基站信息
     * </pre>
     */
    public protocol_v1.V1Cellular.CellOrBuilder getCellInfoOrBuilder(
        int index) {
      return cellInfo_.get(index);
    }

    public static final int SAMPLETYPE_FIELD_NUMBER = 20;
    private int sampleType_;
    /**
     * <code>optional int32 SampleType = 20 [default = 0];</code>
     *
     * <pre>
     * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
     * </pre>
     */
    public boolean hasSampleType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 SampleType = 20 [default = 0];</code>
     *
     * <pre>
     * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
     * </pre>
     */
    public int getSampleType() {
      return sampleType_;
    }

    public static final int ERRORFLAG_FIELD_NUMBER = 101;
    private int errorFlag_;
    /**
     * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
     *
     * <pre>
     * 错误标志
     * </pre>
     */
    public boolean hasErrorFlag() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
     *
     * <pre>
     * 错误标志
     * </pre>
     */
    public int getErrorFlag() {
      return errorFlag_;
    }

    public static final int EXITFLAG_FIELD_NUMBER = 102;
    private int exitFlag_;
    /**
     * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
     *
     * <pre>
     * 退出状态
     * </pre>
     */
    public boolean hasExitFlag() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
     *
     * <pre>
     * 退出状态
     * </pre>
     */
    public int getExitFlag() {
      return exitFlag_;
    }

    public static final int TOTALTIME_FIELD_NUMBER = 103;
    private int totalTime_;
    /**
     * <code>optional int32 TotalTime = 103 [default = 0];</code>
     *
     * <pre>
     * 通信总耗时
     * </pre>
     */
    public boolean hasTotalTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 TotalTime = 103 [default = 0];</code>
     *
     * <pre>
     * 通信总耗时
     * </pre>
     */
    public int getTotalTime() {
      return totalTime_;
    }

    public static final int HWTTIME_FIELD_NUMBER = 104;
    private int hwtTime_;
    /**
     * <code>optional int32 HwtTime = 104 [default = 0];</code>
     *
     * <pre>
     * 硬件测试耗时
     * </pre>
     */
    public boolean hasHwtTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 HwtTime = 104 [default = 0];</code>
     *
     * <pre>
     * 硬件测试耗时
     * </pre>
     */
    public int getHwtTime() {
      return hwtTime_;
    }

    public static final int SIMTIME_FIELD_NUMBER = 105;
    private int simTime_;
    /**
     * <code>optional int32 SimTime = 105 [default = 0];</code>
     *
     * <pre>
     * SIM卡检测耗时
     * </pre>
     */
    public boolean hasSimTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 SimTime = 105 [default = 0];</code>
     *
     * <pre>
     * SIM卡检测耗时
     * </pre>
     */
    public int getSimTime() {
      return simTime_;
    }

    public static final int NUMTIME_FIELD_NUMBER = 106;
    private int numTime_;
    /**
     * <code>optional int32 NumTime = 106 [default = 0];</code>
     *
     * <pre>
     * 读电话号码耗时
     * </pre>
     */
    public boolean hasNumTime() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 NumTime = 106 [default = 0];</code>
     *
     * <pre>
     * 读电话号码耗时
     * </pre>
     */
    public int getNumTime() {
      return numTime_;
    }

    public static final int RSSITIME_FIELD_NUMBER = 107;
    private int rssiTime_;
    /**
     * <code>optional int32 RssiTime = 107 [default = 0];</code>
     *
     * <pre>
     * 信号检测耗时
     * </pre>
     */
    public boolean hasRssiTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 RssiTime = 107 [default = 0];</code>
     *
     * <pre>
     * 信号检测耗时
     * </pre>
     */
    public int getRssiTime() {
      return rssiTime_;
    }

    public static final int REGISTERTIME_FIELD_NUMBER = 108;
    private int registerTime_;
    /**
     * <code>optional int32 RegisterTime = 108 [default = 0];</code>
     *
     * <pre>
     * 注网耗时
     * </pre>
     */
    public boolean hasRegisterTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 RegisterTime = 108 [default = 0];</code>
     *
     * <pre>
     * 注网耗时
     * </pre>
     */
    public int getRegisterTime() {
      return registerTime_;
    }

    public static final int ATTACHTIME_FIELD_NUMBER = 109;
    private int attachTime_;
    /**
     * <code>optional int32 AttachTime = 109 [default = 0];</code>
     *
     * <pre>
     * 附着GPRS耗时
     * </pre>
     */
    public boolean hasAttachTime() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 AttachTime = 109 [default = 0];</code>
     *
     * <pre>
     * 附着GPRS耗时
     * </pre>
     */
    public int getAttachTime() {
      return attachTime_;
    }

    public static final int PDPTIME_FIELD_NUMBER = 110;
    private int pdpTime_;
    /**
     * <code>optional int32 PdpTime = 110 [default = 0];</code>
     *
     * <pre>
     * 激活移动场景耗时
     * </pre>
     */
    public boolean hasPdpTime() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 PdpTime = 110 [default = 0];</code>
     *
     * <pre>
     * 激活移动场景耗时
     * </pre>
     */
    public int getPdpTime() {
      return pdpTime_;
    }

    public static final int CONNECTIONTIME_FIELD_NUMBER = 111;
    private int connectionTime_;
    /**
     * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
     *
     * <pre>
     * 连接耗时
     * </pre>
     */
    public boolean hasConnectionTime() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
     *
     * <pre>
     * 连接耗时
     * </pre>
     */
    public int getConnectionTime() {
      return connectionTime_;
    }

    public static final int COMMUNICATIONTIME_FIELD_NUMBER = 112;
    private int communicationTime_;
    /**
     * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
     *
     * <pre>
     * 数传耗时
     * </pre>
     */
    public boolean hasCommunicationTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
     *
     * <pre>
     * 数传耗时
     * </pre>
     */
    public int getCommunicationTime() {
      return communicationTime_;
    }

    public static final int SMSTIME_FIELD_NUMBER = 113;
    private int smsTime_;
    /**
     * <code>optional int32 SmsTime = 113 [default = 0];</code>
     *
     * <pre>
     * 发短信耗时
     * </pre>
     */
    public boolean hasSmsTime() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 SmsTime = 113 [default = 0];</code>
     *
     * <pre>
     * 发短信耗时
     * </pre>
     */
    public int getSmsTime() {
      return smsTime_;
    }

    public static final int NETWORKOPERATOR_FIELD_NUMBER = 114;
    private int networkOperator_;
    /**
     * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    public boolean hasNetworkOperator() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
     *
     * <pre>
     * 运营商代码
     * </pre>
     */
    public int getNetworkOperator() {
      return networkOperator_;
    }

    public static final int SIGNALSTRENGTH_FIELD_NUMBER = 115;
    private int signalStrength_;
    /**
     * <code>optional int32 SignalStrength = 115 [default = 0];</code>
     *
     * <pre>
     * 信号强度
     * </pre>
     */
    public boolean hasSignalStrength() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 SignalStrength = 115 [default = 0];</code>
     *
     * <pre>
     * 信号强度
     * </pre>
     */
    public int getSignalStrength() {
      return signalStrength_;
    }

    public static final int BITERRORRATE_FIELD_NUMBER = 116;
    private int bitErrorRate_;
    /**
     * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
     *
     * <pre>
     * 误码率
     * </pre>
     */
    public boolean hasBitErrorRate() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
     *
     * <pre>
     * 误码率
     * </pre>
     */
    public int getBitErrorRate() {
      return bitErrorRate_;
    }

    public static final int RADIOACCESSTECHNOLOGY_FIELD_NUMBER = 117;
    private int radioAccessTechnology_;
    /**
     * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
     *
     * <pre>
     * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
     * </pre>
     */
    public boolean hasRadioAccessTechnology() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
     *
     * <pre>
     * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
     * </pre>
     */
    public int getRadioAccessTechnology() {
      return radioAccessTechnology_;
    }

    public static final int COVERAGEEXTENSIONLEVEL_FIELD_NUMBER = 118;
    private int coverageExtensionLevel_;
    /**
     * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
     *
     * <pre>
     * 覆盖等级
     * </pre>
     */
    public boolean hasCoverageExtensionLevel() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
     *
     * <pre>
     * 覆盖等级
     * </pre>
     */
    public int getCoverageExtensionLevel() {
      return coverageExtensionLevel_;
    }

    public static final int SIGNALTONOISERATIO_FIELD_NUMBER = 119;
    private int signalToNoiseRatio_;
    /**
     * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
     *
     * <pre>
     * 信噪比
     * </pre>
     */
    public boolean hasSignalToNoiseRatio() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
     *
     * <pre>
     * 信噪比
     * </pre>
     */
    public int getSignalToNoiseRatio() {
      return signalToNoiseRatio_;
    }

    public static final int CELLID_FIELD_NUMBER = 120;
    private int cellID_;
    /**
     * <code>optional int32 CellID = 120 [default = 0];</code>
     *
     * <pre>
     * 蜂窝ID
     * </pre>
     */
    public boolean hasCellID() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 CellID = 120 [default = 0];</code>
     *
     * <pre>
     * 蜂窝ID
     * </pre>
     */
    public int getCellID() {
      return cellID_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 121;
    private int temperature_;
    /**
     * <code>optional int32 Temperature = 121 [default = 0];</code>
     *
     * <pre>
     * 内部温度: 摄氏度, 精确到小数点后一位
     * </pre>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 Temperature = 121 [default = 0];</code>
     *
     * <pre>
     * 内部温度: 摄氏度, 精确到小数点后一位
     * </pre>
     */
    public int getTemperature() {
      return temperature_;
    }

    public static final int BATTERYVOLTAGE_FIELD_NUMBER = 122;
    private int batteryVoltage_;
    /**
     * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
     *
     * <pre>
     * 电池电压: 毫伏, 精度到0.001V
     * </pre>
     */
    public boolean hasBatteryVoltage() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
     *
     * <pre>
     * 电池电压: 毫伏, 精度到0.001V
     * </pre>
     */
    public int getBatteryVoltage() {
      return batteryVoltage_;
    }

    public static final int LAC_FIELD_NUMBER = 123;
    private int lAC_;
    /**
     * <code>optional int32 LAC = 123 [default = 0];</code>
     *
     * <pre>
     * 蜂窝LAC
     * </pre>
     */
    public boolean hasLAC() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 LAC = 123 [default = 0];</code>
     *
     * <pre>
     * 蜂窝LAC
     * </pre>
     */
    public int getLAC() {
      return lAC_;
    }

    public static final int PHYSCELLID_FIELD_NUMBER = 124;
    private int physCellID_;
    /**
     * <code>optional int32 PhysCellID = 124 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    public boolean hasPhysCellID() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 PhysCellID = 124 [default = 0];</code>
     *
     * <pre>
     * 物理基站ID: 4G
     * </pre>
     */
    public int getPhysCellID() {
      return physCellID_;
    }

    public static final int RXLEVEL_FIELD_NUMBER = 125;
    private int rxLevel_;
    /**
     * <code>optional sint32 RxLevel = 125 [default = -999];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    public boolean hasRxLevel() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional sint32 RxLevel = 125 [default = -999];</code>
     *
     * <pre>
     * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
     * </pre>
     */
    public int getRxLevel() {
      return rxLevel_;
    }

    public static final int RXQUALITY_FIELD_NUMBER = 126;
    private int rxQuality_;
    /**
     * <code>optional sint32 RxQuality = 126 [default = -999];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    public boolean hasRxQuality() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional sint32 RxQuality = 126 [default = -999];</code>
     *
     * <pre>
     * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
     * </pre>
     */
    public int getRxQuality() {
      return rxQuality_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getCellInfoCount(); i++) {
        if (!getCellInfo(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, timestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, longitude_);
      }
      for (int i = 0; i < cellInfo_.size(); i++) {
        output.writeMessage(4, cellInfo_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(20, sampleType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(101, errorFlag_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(102, exitFlag_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(103, totalTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(104, hwtTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(105, simTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(106, numTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(107, rssiTime_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(108, registerTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(109, attachTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(110, pdpTime_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(111, connectionTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(112, communicationTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(113, smsTime_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(114, networkOperator_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(115, signalStrength_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(116, bitErrorRate_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(117, radioAccessTechnology_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeSInt32(118, coverageExtensionLevel_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeSInt32(119, signalToNoiseRatio_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(120, cellID_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(121, temperature_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(122, batteryVoltage_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(123, lAC_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(124, physCellID_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeSInt32(125, rxLevel_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeSInt32(126, rxQuality_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, timestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, longitude_);
      }
      for (int i = 0; i < cellInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, cellInfo_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, sampleType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(101, errorFlag_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(102, exitFlag_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(103, totalTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(104, hwtTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(105, simTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(106, numTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(107, rssiTime_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(108, registerTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(109, attachTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(110, pdpTime_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(111, connectionTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(112, communicationTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(113, smsTime_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(114, networkOperator_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(115, signalStrength_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(116, bitErrorRate_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(117, radioAccessTechnology_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(118, coverageExtensionLevel_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(119, signalToNoiseRatio_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(120, cellID_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(121, temperature_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(122, batteryVoltage_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(123, lAC_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(124, physCellID_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(125, rxLevel_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(126, rxQuality_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cellular parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protocol_v1.V1Cellular.Cellular parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protocol_v1.V1Cellular.Cellular parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol_v1.V1Cellular.Cellular prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protocol_v1.Cellular}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protocol_v1.Cellular)
        protocol_v1.V1Cellular.CellularOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cellular_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cellular_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol_v1.V1Cellular.Cellular.class, protocol_v1.V1Cellular.Cellular.Builder.class);
      }

      // Construct using protocol_v1.V1Cellular.Cellular.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCellInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 2000000000;
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 2000000000;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (cellInfoBuilder_ == null) {
          cellInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          cellInfoBuilder_.clear();
        }
        sampleType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        errorFlag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        exitFlag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        totalTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        hwtTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        simTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        numTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        rssiTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        registerTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        attachTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        pdpTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        connectionTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        communicationTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        smsTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        networkOperator_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        signalStrength_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        bitErrorRate_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        radioAccessTechnology_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        coverageExtensionLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        signalToNoiseRatio_ = -999;
        bitField0_ = (bitField0_ & ~0x00800000);
        cellID_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        temperature_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        batteryVoltage_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        lAC_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        physCellID_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        rxLevel_ = -999;
        bitField0_ = (bitField0_ & ~0x20000000);
        rxQuality_ = -999;
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol_v1.V1Cellular.internal_static_protocol_v1_Cellular_descriptor;
      }

      public protocol_v1.V1Cellular.Cellular getDefaultInstanceForType() {
        return protocol_v1.V1Cellular.Cellular.getDefaultInstance();
      }

      public protocol_v1.V1Cellular.Cellular build() {
        protocol_v1.V1Cellular.Cellular result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol_v1.V1Cellular.Cellular buildPartial() {
        protocol_v1.V1Cellular.Cellular result = new protocol_v1.V1Cellular.Cellular(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.longitude_ = longitude_;
        if (cellInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            cellInfo_ = java.util.Collections.unmodifiableList(cellInfo_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.cellInfo_ = cellInfo_;
        } else {
          result.cellInfo_ = cellInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.sampleType_ = sampleType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.errorFlag_ = errorFlag_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.exitFlag_ = exitFlag_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.totalTime_ = totalTime_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.hwtTime_ = hwtTime_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.simTime_ = simTime_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.numTime_ = numTime_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.rssiTime_ = rssiTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.registerTime_ = registerTime_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.attachTime_ = attachTime_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.pdpTime_ = pdpTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.connectionTime_ = connectionTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.communicationTime_ = communicationTime_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.smsTime_ = smsTime_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.networkOperator_ = networkOperator_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.signalStrength_ = signalStrength_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.bitErrorRate_ = bitErrorRate_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.radioAccessTechnology_ = radioAccessTechnology_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.coverageExtensionLevel_ = coverageExtensionLevel_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.signalToNoiseRatio_ = signalToNoiseRatio_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.cellID_ = cellID_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.temperature_ = temperature_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.batteryVoltage_ = batteryVoltage_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.lAC_ = lAC_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.physCellID_ = physCellID_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.rxLevel_ = rxLevel_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.rxQuality_ = rxQuality_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol_v1.V1Cellular.Cellular) {
          return mergeFrom((protocol_v1.V1Cellular.Cellular)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol_v1.V1Cellular.Cellular other) {
        if (other == protocol_v1.V1Cellular.Cellular.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (cellInfoBuilder_ == null) {
          if (!other.cellInfo_.isEmpty()) {
            if (cellInfo_.isEmpty()) {
              cellInfo_ = other.cellInfo_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCellInfoIsMutable();
              cellInfo_.addAll(other.cellInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.cellInfo_.isEmpty()) {
            if (cellInfoBuilder_.isEmpty()) {
              cellInfoBuilder_.dispose();
              cellInfoBuilder_ = null;
              cellInfo_ = other.cellInfo_;
              bitField0_ = (bitField0_ & ~0x00000008);
              cellInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCellInfoFieldBuilder() : null;
            } else {
              cellInfoBuilder_.addAllMessages(other.cellInfo_);
            }
          }
        }
        if (other.hasSampleType()) {
          setSampleType(other.getSampleType());
        }
        if (other.hasErrorFlag()) {
          setErrorFlag(other.getErrorFlag());
        }
        if (other.hasExitFlag()) {
          setExitFlag(other.getExitFlag());
        }
        if (other.hasTotalTime()) {
          setTotalTime(other.getTotalTime());
        }
        if (other.hasHwtTime()) {
          setHwtTime(other.getHwtTime());
        }
        if (other.hasSimTime()) {
          setSimTime(other.getSimTime());
        }
        if (other.hasNumTime()) {
          setNumTime(other.getNumTime());
        }
        if (other.hasRssiTime()) {
          setRssiTime(other.getRssiTime());
        }
        if (other.hasRegisterTime()) {
          setRegisterTime(other.getRegisterTime());
        }
        if (other.hasAttachTime()) {
          setAttachTime(other.getAttachTime());
        }
        if (other.hasPdpTime()) {
          setPdpTime(other.getPdpTime());
        }
        if (other.hasConnectionTime()) {
          setConnectionTime(other.getConnectionTime());
        }
        if (other.hasCommunicationTime()) {
          setCommunicationTime(other.getCommunicationTime());
        }
        if (other.hasSmsTime()) {
          setSmsTime(other.getSmsTime());
        }
        if (other.hasNetworkOperator()) {
          setNetworkOperator(other.getNetworkOperator());
        }
        if (other.hasSignalStrength()) {
          setSignalStrength(other.getSignalStrength());
        }
        if (other.hasBitErrorRate()) {
          setBitErrorRate(other.getBitErrorRate());
        }
        if (other.hasRadioAccessTechnology()) {
          setRadioAccessTechnology(other.getRadioAccessTechnology());
        }
        if (other.hasCoverageExtensionLevel()) {
          setCoverageExtensionLevel(other.getCoverageExtensionLevel());
        }
        if (other.hasSignalToNoiseRatio()) {
          setSignalToNoiseRatio(other.getSignalToNoiseRatio());
        }
        if (other.hasCellID()) {
          setCellID(other.getCellID());
        }
        if (other.hasTemperature()) {
          setTemperature(other.getTemperature());
        }
        if (other.hasBatteryVoltage()) {
          setBatteryVoltage(other.getBatteryVoltage());
        }
        if (other.hasLAC()) {
          setLAC(other.getLAC());
        }
        if (other.hasPhysCellID()) {
          setPhysCellID(other.getPhysCellID());
        }
        if (other.hasRxLevel()) {
          setRxLevel(other.getRxLevel());
        }
        if (other.hasRxQuality()) {
          setRxQuality(other.getRxQuality());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getCellInfoCount(); i++) {
          if (!getCellInfo(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol_v1.V1Cellular.Cellular parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol_v1.V1Cellular.Cellular) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int timestamp_ ;
      /**
       * <code>optional uint32 Timestamp = 1 [default = 0];</code>
       *
       * <pre>
       * 结束时间
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 Timestamp = 1 [default = 0];</code>
       *
       * <pre>
       * 结束时间
       * </pre>
       */
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional uint32 Timestamp = 1 [default = 0];</code>
       *
       * <pre>
       * 结束时间
       * </pre>
       */
      public Builder setTimestamp(int value) {
        bitField0_ |= 0x00000001;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 Timestamp = 1 [default = 0];</code>
       *
       * <pre>
       * 结束时间
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private int latitude_ = 2000000000;
      /**
       * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
       *
       * <pre>
       * 纬度: 度, 精度到小数点后第7位
       * </pre>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
       *
       * <pre>
       * 纬度: 度, 精度到小数点后第7位
       * </pre>
       */
      public int getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
       *
       * <pre>
       * 纬度: 度, 精度到小数点后第7位
       * </pre>
       */
      public Builder setLatitude(int value) {
        bitField0_ |= 0x00000002;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 Latitude = 2 [default = 2000000000];</code>
       *
       * <pre>
       * 纬度: 度, 精度到小数点后第7位
       * </pre>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        latitude_ = 2000000000;
        onChanged();
        return this;
      }

      private int longitude_ = 2000000000;
      /**
       * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
       *
       * <pre>
       * 经度: 度, 精度到小数点后第7位
       * </pre>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
       *
       * <pre>
       * 经度: 度, 精度到小数点后第7位
       * </pre>
       */
      public int getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
       *
       * <pre>
       * 经度: 度, 精度到小数点后第7位
       * </pre>
       */
      public Builder setLongitude(int value) {
        bitField0_ |= 0x00000004;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 Longitude = 3 [default = 2000000000];</code>
       *
       * <pre>
       * 经度: 度, 精度到小数点后第7位
       * </pre>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        longitude_ = 2000000000;
        onChanged();
        return this;
      }

      private java.util.List<protocol_v1.V1Cellular.Cell> cellInfo_ =
        java.util.Collections.emptyList();
      private void ensureCellInfoIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cellInfo_ = new java.util.ArrayList<protocol_v1.V1Cellular.Cell>(cellInfo_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protocol_v1.V1Cellular.Cell, protocol_v1.V1Cellular.Cell.Builder, protocol_v1.V1Cellular.CellOrBuilder> cellInfoBuilder_;

      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public java.util.List<protocol_v1.V1Cellular.Cell> getCellInfoList() {
        if (cellInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cellInfo_);
        } else {
          return cellInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public int getCellInfoCount() {
        if (cellInfoBuilder_ == null) {
          return cellInfo_.size();
        } else {
          return cellInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public protocol_v1.V1Cellular.Cell getCellInfo(int index) {
        if (cellInfoBuilder_ == null) {
          return cellInfo_.get(index);
        } else {
          return cellInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder setCellInfo(
          int index, protocol_v1.V1Cellular.Cell value) {
        if (cellInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellInfoIsMutable();
          cellInfo_.set(index, value);
          onChanged();
        } else {
          cellInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder setCellInfo(
          int index, protocol_v1.V1Cellular.Cell.Builder builderForValue) {
        if (cellInfoBuilder_ == null) {
          ensureCellInfoIsMutable();
          cellInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          cellInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder addCellInfo(protocol_v1.V1Cellular.Cell value) {
        if (cellInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellInfoIsMutable();
          cellInfo_.add(value);
          onChanged();
        } else {
          cellInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder addCellInfo(
          int index, protocol_v1.V1Cellular.Cell value) {
        if (cellInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellInfoIsMutable();
          cellInfo_.add(index, value);
          onChanged();
        } else {
          cellInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder addCellInfo(
          protocol_v1.V1Cellular.Cell.Builder builderForValue) {
        if (cellInfoBuilder_ == null) {
          ensureCellInfoIsMutable();
          cellInfo_.add(builderForValue.build());
          onChanged();
        } else {
          cellInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder addCellInfo(
          int index, protocol_v1.V1Cellular.Cell.Builder builderForValue) {
        if (cellInfoBuilder_ == null) {
          ensureCellInfoIsMutable();
          cellInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          cellInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder addAllCellInfo(
          java.lang.Iterable<? extends protocol_v1.V1Cellular.Cell> values) {
        if (cellInfoBuilder_ == null) {
          ensureCellInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cellInfo_);
          onChanged();
        } else {
          cellInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder clearCellInfo() {
        if (cellInfoBuilder_ == null) {
          cellInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          cellInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public Builder removeCellInfo(int index) {
        if (cellInfoBuilder_ == null) {
          ensureCellInfoIsMutable();
          cellInfo_.remove(index);
          onChanged();
        } else {
          cellInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public protocol_v1.V1Cellular.Cell.Builder getCellInfoBuilder(
          int index) {
        return getCellInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public protocol_v1.V1Cellular.CellOrBuilder getCellInfoOrBuilder(
          int index) {
        if (cellInfoBuilder_ == null) {
          return cellInfo_.get(index);  } else {
          return cellInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public java.util.List<? extends protocol_v1.V1Cellular.CellOrBuilder> 
           getCellInfoOrBuilderList() {
        if (cellInfoBuilder_ != null) {
          return cellInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cellInfo_);
        }
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public protocol_v1.V1Cellular.Cell.Builder addCellInfoBuilder() {
        return getCellInfoFieldBuilder().addBuilder(
            protocol_v1.V1Cellular.Cell.getDefaultInstance());
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public protocol_v1.V1Cellular.Cell.Builder addCellInfoBuilder(
          int index) {
        return getCellInfoFieldBuilder().addBuilder(
            index, protocol_v1.V1Cellular.Cell.getDefaultInstance());
      }
      /**
       * <code>repeated .protocol_v1.Cell CellInfo = 4;</code>
       *
       * <pre>
       * 基站信息
       * </pre>
       */
      public java.util.List<protocol_v1.V1Cellular.Cell.Builder> 
           getCellInfoBuilderList() {
        return getCellInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protocol_v1.V1Cellular.Cell, protocol_v1.V1Cellular.Cell.Builder, protocol_v1.V1Cellular.CellOrBuilder> 
          getCellInfoFieldBuilder() {
        if (cellInfoBuilder_ == null) {
          cellInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protocol_v1.V1Cellular.Cell, protocol_v1.V1Cellular.Cell.Builder, protocol_v1.V1Cellular.CellOrBuilder>(
                  cellInfo_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          cellInfo_ = null;
        }
        return cellInfoBuilder_;
      }

      private int sampleType_ ;
      /**
       * <code>optional int32 SampleType = 20 [default = 0];</code>
       *
       * <pre>
       * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
       * </pre>
       */
      public boolean hasSampleType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 SampleType = 20 [default = 0];</code>
       *
       * <pre>
       * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
       * </pre>
       */
      public int getSampleType() {
        return sampleType_;
      }
      /**
       * <code>optional int32 SampleType = 20 [default = 0];</code>
       *
       * <pre>
       * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
       * </pre>
       */
      public Builder setSampleType(int value) {
        bitField0_ |= 0x00000010;
        sampleType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 SampleType = 20 [default = 0];</code>
       *
       * <pre>
       * 采集类型(按位标记): 0000/0001:普通采样   0010:电压BOOST    0100:速度BOOST
       * </pre>
       */
      public Builder clearSampleType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sampleType_ = 0;
        onChanged();
        return this;
      }

      private int errorFlag_ ;
      /**
       * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
       *
       * <pre>
       * 错误标志
       * </pre>
       */
      public boolean hasErrorFlag() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
       *
       * <pre>
       * 错误标志
       * </pre>
       */
      public int getErrorFlag() {
        return errorFlag_;
      }
      /**
       * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
       *
       * <pre>
       * 错误标志
       * </pre>
       */
      public Builder setErrorFlag(int value) {
        bitField0_ |= 0x00000020;
        errorFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ErrorFlag = 101 [default = 0];</code>
       *
       * <pre>
       * 错误标志
       * </pre>
       */
      public Builder clearErrorFlag() {
        bitField0_ = (bitField0_ & ~0x00000020);
        errorFlag_ = 0;
        onChanged();
        return this;
      }

      private int exitFlag_ ;
      /**
       * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
       *
       * <pre>
       * 退出状态
       * </pre>
       */
      public boolean hasExitFlag() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
       *
       * <pre>
       * 退出状态
       * </pre>
       */
      public int getExitFlag() {
        return exitFlag_;
      }
      /**
       * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
       *
       * <pre>
       * 退出状态
       * </pre>
       */
      public Builder setExitFlag(int value) {
        bitField0_ |= 0x00000040;
        exitFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ExitFlag = 102 [default = 0];</code>
       *
       * <pre>
       * 退出状态
       * </pre>
       */
      public Builder clearExitFlag() {
        bitField0_ = (bitField0_ & ~0x00000040);
        exitFlag_ = 0;
        onChanged();
        return this;
      }

      private int totalTime_ ;
      /**
       * <code>optional int32 TotalTime = 103 [default = 0];</code>
       *
       * <pre>
       * 通信总耗时
       * </pre>
       */
      public boolean hasTotalTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 TotalTime = 103 [default = 0];</code>
       *
       * <pre>
       * 通信总耗时
       * </pre>
       */
      public int getTotalTime() {
        return totalTime_;
      }
      /**
       * <code>optional int32 TotalTime = 103 [default = 0];</code>
       *
       * <pre>
       * 通信总耗时
       * </pre>
       */
      public Builder setTotalTime(int value) {
        bitField0_ |= 0x00000080;
        totalTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 TotalTime = 103 [default = 0];</code>
       *
       * <pre>
       * 通信总耗时
       * </pre>
       */
      public Builder clearTotalTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        totalTime_ = 0;
        onChanged();
        return this;
      }

      private int hwtTime_ ;
      /**
       * <code>optional int32 HwtTime = 104 [default = 0];</code>
       *
       * <pre>
       * 硬件测试耗时
       * </pre>
       */
      public boolean hasHwtTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 HwtTime = 104 [default = 0];</code>
       *
       * <pre>
       * 硬件测试耗时
       * </pre>
       */
      public int getHwtTime() {
        return hwtTime_;
      }
      /**
       * <code>optional int32 HwtTime = 104 [default = 0];</code>
       *
       * <pre>
       * 硬件测试耗时
       * </pre>
       */
      public Builder setHwtTime(int value) {
        bitField0_ |= 0x00000100;
        hwtTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 HwtTime = 104 [default = 0];</code>
       *
       * <pre>
       * 硬件测试耗时
       * </pre>
       */
      public Builder clearHwtTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        hwtTime_ = 0;
        onChanged();
        return this;
      }

      private int simTime_ ;
      /**
       * <code>optional int32 SimTime = 105 [default = 0];</code>
       *
       * <pre>
       * SIM卡检测耗时
       * </pre>
       */
      public boolean hasSimTime() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 SimTime = 105 [default = 0];</code>
       *
       * <pre>
       * SIM卡检测耗时
       * </pre>
       */
      public int getSimTime() {
        return simTime_;
      }
      /**
       * <code>optional int32 SimTime = 105 [default = 0];</code>
       *
       * <pre>
       * SIM卡检测耗时
       * </pre>
       */
      public Builder setSimTime(int value) {
        bitField0_ |= 0x00000200;
        simTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 SimTime = 105 [default = 0];</code>
       *
       * <pre>
       * SIM卡检测耗时
       * </pre>
       */
      public Builder clearSimTime() {
        bitField0_ = (bitField0_ & ~0x00000200);
        simTime_ = 0;
        onChanged();
        return this;
      }

      private int numTime_ ;
      /**
       * <code>optional int32 NumTime = 106 [default = 0];</code>
       *
       * <pre>
       * 读电话号码耗时
       * </pre>
       */
      public boolean hasNumTime() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 NumTime = 106 [default = 0];</code>
       *
       * <pre>
       * 读电话号码耗时
       * </pre>
       */
      public int getNumTime() {
        return numTime_;
      }
      /**
       * <code>optional int32 NumTime = 106 [default = 0];</code>
       *
       * <pre>
       * 读电话号码耗时
       * </pre>
       */
      public Builder setNumTime(int value) {
        bitField0_ |= 0x00000400;
        numTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 NumTime = 106 [default = 0];</code>
       *
       * <pre>
       * 读电话号码耗时
       * </pre>
       */
      public Builder clearNumTime() {
        bitField0_ = (bitField0_ & ~0x00000400);
        numTime_ = 0;
        onChanged();
        return this;
      }

      private int rssiTime_ ;
      /**
       * <code>optional int32 RssiTime = 107 [default = 0];</code>
       *
       * <pre>
       * 信号检测耗时
       * </pre>
       */
      public boolean hasRssiTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 RssiTime = 107 [default = 0];</code>
       *
       * <pre>
       * 信号检测耗时
       * </pre>
       */
      public int getRssiTime() {
        return rssiTime_;
      }
      /**
       * <code>optional int32 RssiTime = 107 [default = 0];</code>
       *
       * <pre>
       * 信号检测耗时
       * </pre>
       */
      public Builder setRssiTime(int value) {
        bitField0_ |= 0x00000800;
        rssiTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 RssiTime = 107 [default = 0];</code>
       *
       * <pre>
       * 信号检测耗时
       * </pre>
       */
      public Builder clearRssiTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rssiTime_ = 0;
        onChanged();
        return this;
      }

      private int registerTime_ ;
      /**
       * <code>optional int32 RegisterTime = 108 [default = 0];</code>
       *
       * <pre>
       * 注网耗时
       * </pre>
       */
      public boolean hasRegisterTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 RegisterTime = 108 [default = 0];</code>
       *
       * <pre>
       * 注网耗时
       * </pre>
       */
      public int getRegisterTime() {
        return registerTime_;
      }
      /**
       * <code>optional int32 RegisterTime = 108 [default = 0];</code>
       *
       * <pre>
       * 注网耗时
       * </pre>
       */
      public Builder setRegisterTime(int value) {
        bitField0_ |= 0x00001000;
        registerTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 RegisterTime = 108 [default = 0];</code>
       *
       * <pre>
       * 注网耗时
       * </pre>
       */
      public Builder clearRegisterTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        registerTime_ = 0;
        onChanged();
        return this;
      }

      private int attachTime_ ;
      /**
       * <code>optional int32 AttachTime = 109 [default = 0];</code>
       *
       * <pre>
       * 附着GPRS耗时
       * </pre>
       */
      public boolean hasAttachTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 AttachTime = 109 [default = 0];</code>
       *
       * <pre>
       * 附着GPRS耗时
       * </pre>
       */
      public int getAttachTime() {
        return attachTime_;
      }
      /**
       * <code>optional int32 AttachTime = 109 [default = 0];</code>
       *
       * <pre>
       * 附着GPRS耗时
       * </pre>
       */
      public Builder setAttachTime(int value) {
        bitField0_ |= 0x00002000;
        attachTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 AttachTime = 109 [default = 0];</code>
       *
       * <pre>
       * 附着GPRS耗时
       * </pre>
       */
      public Builder clearAttachTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        attachTime_ = 0;
        onChanged();
        return this;
      }

      private int pdpTime_ ;
      /**
       * <code>optional int32 PdpTime = 110 [default = 0];</code>
       *
       * <pre>
       * 激活移动场景耗时
       * </pre>
       */
      public boolean hasPdpTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 PdpTime = 110 [default = 0];</code>
       *
       * <pre>
       * 激活移动场景耗时
       * </pre>
       */
      public int getPdpTime() {
        return pdpTime_;
      }
      /**
       * <code>optional int32 PdpTime = 110 [default = 0];</code>
       *
       * <pre>
       * 激活移动场景耗时
       * </pre>
       */
      public Builder setPdpTime(int value) {
        bitField0_ |= 0x00004000;
        pdpTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 PdpTime = 110 [default = 0];</code>
       *
       * <pre>
       * 激活移动场景耗时
       * </pre>
       */
      public Builder clearPdpTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        pdpTime_ = 0;
        onChanged();
        return this;
      }

      private int connectionTime_ ;
      /**
       * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
       *
       * <pre>
       * 连接耗时
       * </pre>
       */
      public boolean hasConnectionTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
       *
       * <pre>
       * 连接耗时
       * </pre>
       */
      public int getConnectionTime() {
        return connectionTime_;
      }
      /**
       * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
       *
       * <pre>
       * 连接耗时
       * </pre>
       */
      public Builder setConnectionTime(int value) {
        bitField0_ |= 0x00008000;
        connectionTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ConnectionTime = 111 [default = 0];</code>
       *
       * <pre>
       * 连接耗时
       * </pre>
       */
      public Builder clearConnectionTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        connectionTime_ = 0;
        onChanged();
        return this;
      }

      private int communicationTime_ ;
      /**
       * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
       *
       * <pre>
       * 数传耗时
       * </pre>
       */
      public boolean hasCommunicationTime() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
       *
       * <pre>
       * 数传耗时
       * </pre>
       */
      public int getCommunicationTime() {
        return communicationTime_;
      }
      /**
       * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
       *
       * <pre>
       * 数传耗时
       * </pre>
       */
      public Builder setCommunicationTime(int value) {
        bitField0_ |= 0x00010000;
        communicationTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 CommunicationTime = 112 [default = 0];</code>
       *
       * <pre>
       * 数传耗时
       * </pre>
       */
      public Builder clearCommunicationTime() {
        bitField0_ = (bitField0_ & ~0x00010000);
        communicationTime_ = 0;
        onChanged();
        return this;
      }

      private int smsTime_ ;
      /**
       * <code>optional int32 SmsTime = 113 [default = 0];</code>
       *
       * <pre>
       * 发短信耗时
       * </pre>
       */
      public boolean hasSmsTime() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 SmsTime = 113 [default = 0];</code>
       *
       * <pre>
       * 发短信耗时
       * </pre>
       */
      public int getSmsTime() {
        return smsTime_;
      }
      /**
       * <code>optional int32 SmsTime = 113 [default = 0];</code>
       *
       * <pre>
       * 发短信耗时
       * </pre>
       */
      public Builder setSmsTime(int value) {
        bitField0_ |= 0x00020000;
        smsTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 SmsTime = 113 [default = 0];</code>
       *
       * <pre>
       * 发短信耗时
       * </pre>
       */
      public Builder clearSmsTime() {
        bitField0_ = (bitField0_ & ~0x00020000);
        smsTime_ = 0;
        onChanged();
        return this;
      }

      private int networkOperator_ ;
      /**
       * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public boolean hasNetworkOperator() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public int getNetworkOperator() {
        return networkOperator_;
      }
      /**
       * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public Builder setNetworkOperator(int value) {
        bitField0_ |= 0x00040000;
        networkOperator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 NetworkOperator = 114 [default = 0];</code>
       *
       * <pre>
       * 运营商代码
       * </pre>
       */
      public Builder clearNetworkOperator() {
        bitField0_ = (bitField0_ & ~0x00040000);
        networkOperator_ = 0;
        onChanged();
        return this;
      }

      private int signalStrength_ ;
      /**
       * <code>optional int32 SignalStrength = 115 [default = 0];</code>
       *
       * <pre>
       * 信号强度
       * </pre>
       */
      public boolean hasSignalStrength() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 SignalStrength = 115 [default = 0];</code>
       *
       * <pre>
       * 信号强度
       * </pre>
       */
      public int getSignalStrength() {
        return signalStrength_;
      }
      /**
       * <code>optional int32 SignalStrength = 115 [default = 0];</code>
       *
       * <pre>
       * 信号强度
       * </pre>
       */
      public Builder setSignalStrength(int value) {
        bitField0_ |= 0x00080000;
        signalStrength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 SignalStrength = 115 [default = 0];</code>
       *
       * <pre>
       * 信号强度
       * </pre>
       */
      public Builder clearSignalStrength() {
        bitField0_ = (bitField0_ & ~0x00080000);
        signalStrength_ = 0;
        onChanged();
        return this;
      }

      private int bitErrorRate_ ;
      /**
       * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
       *
       * <pre>
       * 误码率
       * </pre>
       */
      public boolean hasBitErrorRate() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
       *
       * <pre>
       * 误码率
       * </pre>
       */
      public int getBitErrorRate() {
        return bitErrorRate_;
      }
      /**
       * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
       *
       * <pre>
       * 误码率
       * </pre>
       */
      public Builder setBitErrorRate(int value) {
        bitField0_ |= 0x00100000;
        bitErrorRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 BitErrorRate = 116 [default = 0];</code>
       *
       * <pre>
       * 误码率
       * </pre>
       */
      public Builder clearBitErrorRate() {
        bitField0_ = (bitField0_ & ~0x00100000);
        bitErrorRate_ = 0;
        onChanged();
        return this;
      }

      private int radioAccessTechnology_ ;
      /**
       * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
       *
       * <pre>
       * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
       * </pre>
       */
      public boolean hasRadioAccessTechnology() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
       *
       * <pre>
       * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
       * </pre>
       */
      public int getRadioAccessTechnology() {
        return radioAccessTechnology_;
      }
      /**
       * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
       *
       * <pre>
       * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
       * </pre>
       */
      public Builder setRadioAccessTechnology(int value) {
        bitField0_ |= 0x00200000;
        radioAccessTechnology_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 RadioAccessTechnology = 117 [default = 0];</code>
       *
       * <pre>
       * 网络类型: 0/1/3 - GSM(2G), 2/4/5/6/8 - UTRAN(3G), 7 - LTE(4G), 9 - NB-IoT(5G), (如果运营商代码和网络类型都为0，直接显示0)
       * </pre>
       */
      public Builder clearRadioAccessTechnology() {
        bitField0_ = (bitField0_ & ~0x00200000);
        radioAccessTechnology_ = 0;
        onChanged();
        return this;
      }

      private int coverageExtensionLevel_ ;
      /**
       * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
       *
       * <pre>
       * 覆盖等级
       * </pre>
       */
      public boolean hasCoverageExtensionLevel() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
       *
       * <pre>
       * 覆盖等级
       * </pre>
       */
      public int getCoverageExtensionLevel() {
        return coverageExtensionLevel_;
      }
      /**
       * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
       *
       * <pre>
       * 覆盖等级
       * </pre>
       */
      public Builder setCoverageExtensionLevel(int value) {
        bitField0_ |= 0x00400000;
        coverageExtensionLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 CoverageExtensionLevel = 118 [default = 0];</code>
       *
       * <pre>
       * 覆盖等级
       * </pre>
       */
      public Builder clearCoverageExtensionLevel() {
        bitField0_ = (bitField0_ & ~0x00400000);
        coverageExtensionLevel_ = 0;
        onChanged();
        return this;
      }

      private int signalToNoiseRatio_ = -999;
      /**
       * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
       *
       * <pre>
       * 信噪比
       * </pre>
       */
      public boolean hasSignalToNoiseRatio() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
       *
       * <pre>
       * 信噪比
       * </pre>
       */
      public int getSignalToNoiseRatio() {
        return signalToNoiseRatio_;
      }
      /**
       * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
       *
       * <pre>
       * 信噪比
       * </pre>
       */
      public Builder setSignalToNoiseRatio(int value) {
        bitField0_ |= 0x00800000;
        signalToNoiseRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 SignalToNoiseRatio = 119 [default = -999];</code>
       *
       * <pre>
       * 信噪比
       * </pre>
       */
      public Builder clearSignalToNoiseRatio() {
        bitField0_ = (bitField0_ & ~0x00800000);
        signalToNoiseRatio_ = -999;
        onChanged();
        return this;
      }

      private int cellID_ ;
      /**
       * <code>optional int32 CellID = 120 [default = 0];</code>
       *
       * <pre>
       * 蜂窝ID
       * </pre>
       */
      public boolean hasCellID() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 CellID = 120 [default = 0];</code>
       *
       * <pre>
       * 蜂窝ID
       * </pre>
       */
      public int getCellID() {
        return cellID_;
      }
      /**
       * <code>optional int32 CellID = 120 [default = 0];</code>
       *
       * <pre>
       * 蜂窝ID
       * </pre>
       */
      public Builder setCellID(int value) {
        bitField0_ |= 0x01000000;
        cellID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 CellID = 120 [default = 0];</code>
       *
       * <pre>
       * 蜂窝ID
       * </pre>
       */
      public Builder clearCellID() {
        bitField0_ = (bitField0_ & ~0x01000000);
        cellID_ = 0;
        onChanged();
        return this;
      }

      private int temperature_ ;
      /**
       * <code>optional int32 Temperature = 121 [default = 0];</code>
       *
       * <pre>
       * 内部温度: 摄氏度, 精确到小数点后一位
       * </pre>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 Temperature = 121 [default = 0];</code>
       *
       * <pre>
       * 内部温度: 摄氏度, 精确到小数点后一位
       * </pre>
       */
      public int getTemperature() {
        return temperature_;
      }
      /**
       * <code>optional int32 Temperature = 121 [default = 0];</code>
       *
       * <pre>
       * 内部温度: 摄氏度, 精确到小数点后一位
       * </pre>
       */
      public Builder setTemperature(int value) {
        bitField0_ |= 0x02000000;
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 Temperature = 121 [default = 0];</code>
       *
       * <pre>
       * 内部温度: 摄氏度, 精确到小数点后一位
       * </pre>
       */
      public Builder clearTemperature() {
        bitField0_ = (bitField0_ & ~0x02000000);
        temperature_ = 0;
        onChanged();
        return this;
      }

      private int batteryVoltage_ ;
      /**
       * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
       *
       * <pre>
       * 电池电压: 毫伏, 精度到0.001V
       * </pre>
       */
      public boolean hasBatteryVoltage() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
       *
       * <pre>
       * 电池电压: 毫伏, 精度到0.001V
       * </pre>
       */
      public int getBatteryVoltage() {
        return batteryVoltage_;
      }
      /**
       * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
       *
       * <pre>
       * 电池电压: 毫伏, 精度到0.001V
       * </pre>
       */
      public Builder setBatteryVoltage(int value) {
        bitField0_ |= 0x04000000;
        batteryVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 BatteryVoltage = 122 [default = 0];</code>
       *
       * <pre>
       * 电池电压: 毫伏, 精度到0.001V
       * </pre>
       */
      public Builder clearBatteryVoltage() {
        bitField0_ = (bitField0_ & ~0x04000000);
        batteryVoltage_ = 0;
        onChanged();
        return this;
      }

      private int lAC_ ;
      /**
       * <code>optional int32 LAC = 123 [default = 0];</code>
       *
       * <pre>
       * 蜂窝LAC
       * </pre>
       */
      public boolean hasLAC() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 LAC = 123 [default = 0];</code>
       *
       * <pre>
       * 蜂窝LAC
       * </pre>
       */
      public int getLAC() {
        return lAC_;
      }
      /**
       * <code>optional int32 LAC = 123 [default = 0];</code>
       *
       * <pre>
       * 蜂窝LAC
       * </pre>
       */
      public Builder setLAC(int value) {
        bitField0_ |= 0x08000000;
        lAC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 LAC = 123 [default = 0];</code>
       *
       * <pre>
       * 蜂窝LAC
       * </pre>
       */
      public Builder clearLAC() {
        bitField0_ = (bitField0_ & ~0x08000000);
        lAC_ = 0;
        onChanged();
        return this;
      }

      private int physCellID_ ;
      /**
       * <code>optional int32 PhysCellID = 124 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public boolean hasPhysCellID() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 PhysCellID = 124 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public int getPhysCellID() {
        return physCellID_;
      }
      /**
       * <code>optional int32 PhysCellID = 124 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public Builder setPhysCellID(int value) {
        bitField0_ |= 0x10000000;
        physCellID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 PhysCellID = 124 [default = 0];</code>
       *
       * <pre>
       * 物理基站ID: 4G
       * </pre>
       */
      public Builder clearPhysCellID() {
        bitField0_ = (bitField0_ & ~0x10000000);
        physCellID_ = 0;
        onChanged();
        return this;
      }

      private int rxLevel_ = -999;
      /**
       * <code>optional sint32 RxLevel = 125 [default = -999];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public boolean hasRxLevel() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional sint32 RxLevel = 125 [default = -999];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public int getRxLevel() {
        return rxLevel_;
      }
      /**
       * <code>optional sint32 RxLevel = 125 [default = -999];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public Builder setRxLevel(int value) {
        bitField0_ |= 0x20000000;
        rxLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 RxLevel = 125 [default = -999];</code>
       *
       * <pre>
       * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
       * </pre>
       */
      public Builder clearRxLevel() {
        bitField0_ = (bitField0_ & ~0x20000000);
        rxLevel_ = -999;
        onChanged();
        return this;
      }

      private int rxQuality_ = -999;
      /**
       * <code>optional sint32 RxQuality = 126 [default = -999];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public boolean hasRxQuality() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional sint32 RxQuality = 126 [default = -999];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public int getRxQuality() {
        return rxQuality_;
      }
      /**
       * <code>optional sint32 RxQuality = 126 [default = -999];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public Builder setRxQuality(int value) {
        bitField0_ |= 0x40000000;
        rxQuality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 RxQuality = 126 [default = -999];</code>
       *
       * <pre>
       * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
       * </pre>
       */
      public Builder clearRxQuality() {
        bitField0_ = (bitField0_ & ~0x40000000);
        rxQuality_ = -999;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protocol_v1.Cellular)
    }

    // @@protoc_insertion_point(class_scope:protocol_v1.Cellular)
    private static final protocol_v1.V1Cellular.Cellular DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol_v1.V1Cellular.Cellular();
    }

    public static protocol_v1.V1Cellular.Cellular getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Cellular>
        PARSER = new com.google.protobuf.AbstractParser<Cellular>() {
      public Cellular parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Cellular(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Cellular> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cellular> getParserForType() {
      return PARSER;
    }

    public protocol_v1.V1Cellular.Cellular getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_protocol_v1_CellularReq_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_protocol_v1_CellularReq_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_protocol_v1_Cell_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_protocol_v1_Cell_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_protocol_v1_Cellular_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_protocol_v1_Cellular_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021v1.Cellular.proto\022\013protocol_v1\032\024v1.Ide" +
      "ntityMsg.proto\"b\n\013CellularReq\022&\n\004Iden\030\001 " +
      "\002(\0132\030.protocol_v1.IdentityMsg\022+\n\014Cellula" +
      "rInfo\030\002 \003(\0132\025.protocol_v1.Cellular\"\363\001\n\004C" +
      "ell\022\016\n\006CellID\030\001 \002(\005\022\022\n\007Serving\030\002 \001(\005:\0010\022" +
      "\017\n\004Type\030\003 \001(\005:\0010\022\016\n\003MCC\030\004 \001(\005:\0010\022\016\n\003MNC\030" +
      "\005 \001(\005:\0010\022\017\n\004BSIC\030\006 \001(\005:\0010\022\016\n\003LAC\030\007 \001(\005:\001" +
      "0\022\016\n\003TAC\030\010 \001(\005:\0010\022\020\n\005ARFCN\030\t \001(\005:\0010\022\023\n\007R" +
      "xLevel\030\n \001(\021:\00299\022\025\n\tRxQuality\030\013 \001(\021:\00299\022" +
      "\020\n\004RSSI\030\014 \001(\021:\00299\022\025\n\nPhysCellID\030\r \001(\005:\0010",
      "\"\220\006\n\010Cellular\022\024\n\tTimestamp\030\001 \001(\r:\0010\022\034\n\010L" +
      "atitude\030\002 \001(\021:\n2000000000\022\035\n\tLongitude\030\003" +
      " \001(\021:\n2000000000\022#\n\010CellInfo\030\004 \003(\0132\021.pro" +
      "tocol_v1.Cell\022\025\n\nSampleType\030\024 \001(\005:\0010\022\024\n\t" +
      "ErrorFlag\030e \001(\r:\0010\022\023\n\010ExitFlag\030f \001(\r:\0010\022" +
      "\024\n\tTotalTime\030g \001(\005:\0010\022\022\n\007HwtTime\030h \001(\005:\001" +
      "0\022\022\n\007SimTime\030i \001(\005:\0010\022\022\n\007NumTime\030j \001(\005:\001" +
      "0\022\023\n\010RssiTime\030k \001(\005:\0010\022\027\n\014RegisterTime\030l" +
      " \001(\005:\0010\022\025\n\nAttachTime\030m \001(\005:\0010\022\022\n\007PdpTim" +
      "e\030n \001(\005:\0010\022\031\n\016ConnectionTime\030o \001(\005:\0010\022\034\n",
      "\021CommunicationTime\030p \001(\005:\0010\022\022\n\007SmsTime\030q" +
      " \001(\005:\0010\022\032\n\017NetworkOperator\030r \001(\r:\0010\022\031\n\016S" +
      "ignalStrength\030s \001(\005:\0010\022\027\n\014BitErrorRate\030t" +
      " \001(\005:\0010\022 \n\025RadioAccessTechnology\030u \001(\005:\001" +
      "0\022!\n\026CoverageExtensionLevel\030v \001(\021:\0010\022 \n\022" +
      "SignalToNoiseRatio\030w \001(\021:\004-999\022\021\n\006CellID" +
      "\030x \001(\005:\0010\022\026\n\013Temperature\030y \001(\005:\0010\022\031\n\016Bat" +
      "teryVoltage\030z \001(\005:\0010\022\016\n\003LAC\030{ \001(\005:\0010\022\025\n\n" +
      "PhysCellID\030| \001(\005:\0010\022\025\n\007RxLevel\030} \001(\021:\004-9" +
      "99\022\027\n\tRxQuality\030~ \001(\021:\004-999B\005\242\002\002V1"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protocol_v1.V1IdentityMsg.getDescriptor(),
        }, assigner);
    internal_static_protocol_v1_CellularReq_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_protocol_v1_CellularReq_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_protocol_v1_CellularReq_descriptor,
        new java.lang.String[] { "Iden", "CellularInfo", });
    internal_static_protocol_v1_Cell_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_protocol_v1_Cell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_protocol_v1_Cell_descriptor,
        new java.lang.String[] { "CellID", "Serving", "Type", "MCC", "MNC", "BSIC", "LAC", "TAC", "ARFCN", "RxLevel", "RxQuality", "RSSI", "PhysCellID", });
    internal_static_protocol_v1_Cellular_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_protocol_v1_Cellular_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_protocol_v1_Cellular_descriptor,
        new java.lang.String[] { "Timestamp", "Latitude", "Longitude", "CellInfo", "SampleType", "ErrorFlag", "ExitFlag", "TotalTime", "HwtTime", "SimTime", "NumTime", "RssiTime", "RegisterTime", "AttachTime", "PdpTime", "ConnectionTime", "CommunicationTime", "SmsTime", "NetworkOperator", "SignalStrength", "BitErrorRate", "RadioAccessTechnology", "CoverageExtensionLevel", "SignalToNoiseRatio", "CellID", "Temperature", "BatteryVoltage", "LAC", "PhysCellID", "RxLevel", "RxQuality", });
    protocol_v1.V1IdentityMsg.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
